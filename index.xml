<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modern Emacs on Modern Emacs</title>
    <link>https://ekaschalk.github.io/</link>
    <description>Recent content in Modern Emacs on Modern Emacs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Eric Kaschalk</copyright>
    <lastBuildDate>Thu, 23 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Colorful ielm - font-locking comint</title>
      <link>https://ekaschalk.github.io/post/comint-highlighting/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/comint-highlighting/</guid>
      <description>
&lt;p&gt;
If you ever used &lt;code&gt;ielm&lt;/code&gt;, or other &lt;code&gt;comint-mode&lt;/code&gt; derivatives, you will notice
that the text you input is not highlighted according to the major-mode.
&lt;/p&gt;
&lt;p&gt;
If I type &lt;code&gt;(setq foo bar)&lt;/code&gt; into ielm, the setq won&amp;#39;t be highlighted.
&lt;/p&gt;
&lt;p&gt;
Why is this? And how do we change this?
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Naive solution
&lt;/h1&gt;
&lt;p&gt;
Look at &lt;code&gt;font-lock-keywords&lt;/code&gt; in ielm and it is suspiciously near-empty. We could
copy over emacs-lisp&amp;#39;s keywords:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(setq-local font-lock-keywords &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;lisp-el-font-lock-keywords-2
                                 &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;lisp-cl-font-lock-keywords-2))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But what if I type in &lt;code&gt;(princ &amp;#34;(setq foo bar)&amp;#34;)&lt;/code&gt;? The output will inherit the
highlighting.
&lt;/p&gt;
&lt;p&gt;
Naively enabling font locking in comint buffers can lead to a mess of syntax
highlighting in the output. While the example above is contrived, it is in
general not a trivial problem.
&lt;/p&gt;
&lt;p&gt;
I wrote and support &lt;a href=&#34;https://github.com/hylang/hy-mode&#34;&gt;hy-mode&lt;/a&gt;, a lisp embedded in Python. When the interpreter is
given &amp;#34;–spy&amp;#34;, the translation of the Hy code to Python is given in the output
before the result of the Hy code. This translation would inherit Hy&amp;#39;s syntax
highlighting and look like a mess.
&lt;/p&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
Python-mode&amp;#39;s solution
&lt;/h1&gt;
&lt;p&gt;
&lt;code&gt;python-mode&lt;/code&gt; actually implements fontification of shell input. How do they do it?
&lt;/p&gt;
&lt;p&gt;
They add a &lt;code&gt;post-command-hook&lt;/code&gt; that essentially extracts the current input being
entered, fontifies it according to python, then reinserts it into the prompt.
&lt;/p&gt;
&lt;p&gt;
There is quite a bit going on to make this work in practice - check out &lt;code&gt;python-shell-font-lock-post-command-hook&lt;/code&gt; if you are interested.
&lt;/p&gt;
&lt;p&gt;
I had success using this approach for &lt;code&gt;hy-mode&lt;/code&gt; but always thought it was a
kludge and difficult to understand and work with. Can&amp;#39;t I just use &lt;code&gt;font-lock-mode&lt;/code&gt; directly?
&lt;/p&gt;
&lt;h1 id=&#34;headline-3&#34;&gt;
My solution
&lt;/h1&gt;
&lt;p&gt;
I came up with a hookless, pure font-lock-mode solution that &lt;em&gt;should&lt;/em&gt; work for
arbitrary modes.
&lt;/p&gt;
&lt;p&gt;
I convert every &lt;code&gt;font-lock-keyword&lt;/code&gt; MATCHER component to check that we are
within a prompt before calling the MATCHER if it is a function or matching on it
if it is a regex.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)

(defun kwd-&amp;gt;comint-kwd (kwd)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Converts a `font-lock-keywords&amp;#39; KWD for `comint-mode&amp;#39; input fontification.&amp;#34;&lt;/span&gt;
  (-let (((matcher &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; match-highlights) kwd))
    &lt;span style=&#34;color:#75715e&#34;&gt;;; below is ` quoted but breaks my blogs syntax higlighting, so removing it!&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; make sure to capture first paren in a ` if copying!&lt;/span&gt;
    ((lambda (limit)
       &lt;span style=&#34;color:#75715e&#34;&gt;;; Matcher can be a function or a regex&lt;/span&gt;
       (when &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbolp&lt;/span&gt; matcher)
                  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;matcher limit)
                &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(re-search-forward &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;matcher limit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
         &lt;span style=&#34;color:#75715e&#34;&gt;;; While the SUBEXP can be anything, this search always can use zero&lt;/span&gt;
         (-let ((start (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
                ((comint-last-start &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; comint-last-end) comint-last-prompt)
                (state (syntax-ppss)))
           (and (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; start comint-last-start)
                &lt;span style=&#34;color:#75715e&#34;&gt;;; Make sure not in comment or string&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;;; have to manually do this in custom MATCHERs&lt;/span&gt;
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; state) (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; state)))))))
     &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;match-highlights)))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; my-ielm-font-lock-kwds
      &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;(-map &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;kwd-&amp;gt;comint-kwd lisp-el-font-lock-keywords-2)
        &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;(-map &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;kwd-&amp;gt;comint-kwd lisp-cl-font-lock-keywords-2)))

(defun set-my-ielm-kwds ()
  (interactive)
  (setq-local font-lock-keywords my-ielm-font-lock-kwds))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now &lt;code&gt;ielm&lt;/code&gt;, my own &lt;code&gt;hy-mode&lt;/code&gt;, etc. highlights shell input without messing with
the output if I call &lt;code&gt;set-my-ielm-kwds&lt;/code&gt; in an ielm buffer.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Emacs programs with Buttercup</title>
      <link>https://ekaschalk.github.io/post/testing-emacs/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/testing-emacs/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://github.com/jorgenschaefer/emacs-buttercup&#34;&gt;Buttercup&lt;/a&gt; is a testing framework for emacs-lisp. It is used by large projects
like &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;Clojure&amp;#39;s CIDER&lt;/a&gt; to write clean, concise, and descriptive tests.
&lt;/p&gt;
&lt;p&gt;
I introduce Buttercup and build up to advanced usages with the faint, unlikely
dream that some Emacs programmer decides to add tests to their library…
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
What is Buttercup?
&lt;/h1&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Introduction
&lt;/h3&gt;
&lt;p&gt;
Buttercup&amp;#39;s entry points are: &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;it&lt;/code&gt;, and &lt;code&gt;expect&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
We &lt;code&gt;describe&lt;/code&gt; a test suite with a name. Test cases within the possibly nested
suites are done with &lt;code&gt;it&lt;/code&gt; and assertions as &lt;code&gt;expect&lt;/code&gt; blocks within.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Four&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;comparisons&amp;#34;&lt;/span&gt;
    (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is greater than one&amp;#34;&lt;/span&gt;
      (expect (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
    (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;and less than five&amp;#34;&lt;/span&gt;
      (expect &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:to-be-less-than&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)))

  (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is a number&amp;#34;&lt;/span&gt;
    (expect (&lt;span style=&#34;color:#a6e22e&#34;&gt;numberp&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
passes with testing output:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
Four
  comparisons
    is greater than one (0.24ms)
    and less than five (0.12ms)
  is a number (0.09ms)
&lt;/pre&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Setup and Teardown
&lt;/h3&gt;
&lt;p&gt;
Buttercup provides &lt;code&gt;before-each&lt;/code&gt;, &lt;code&gt;after-each&lt;/code&gt;, &lt;code&gt;before-all&lt;/code&gt;, and &lt;code&gt;after-all&lt;/code&gt; to
reduce boilerplate with setting up and tearing down test suites.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lisp mode syntax&amp;#34;&lt;/span&gt;
  (before-all (set-syntax-table lisp-mode-syntax-table))
  (after-each (delete-region (point-min) (point-max)))

  (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sets comments&amp;#34;&lt;/span&gt;
    (insert &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;; foo&amp;#34;&lt;/span&gt;)
    (expect (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; (syntax-ppss))))

  (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sets strings&amp;#34;&lt;/span&gt;
    (insert &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;foo\&amp;#34;&amp;#34;&lt;/span&gt;)
    (backward-char)
    (expect (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (syntax-ppss)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Matchers
&lt;/h3&gt;
&lt;p&gt;
The &lt;code&gt;expect&lt;/code&gt; has more utility than simple tests of truth. &lt;strong&gt;Matchers&lt;/strong&gt; are
keywords that tailor the expectation.
&lt;/p&gt;
&lt;p&gt;
Some example matcher expansions:
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;
:to-be&lt;dd&gt;
&lt;p&gt;
&lt;code&gt;(eq foo bar)&lt;/code&gt;
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
:to-equal&lt;dd&gt;
&lt;p&gt;
&lt;code&gt;(equal foo bar)&lt;/code&gt;
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
:to-be-in&lt;dd&gt;
&lt;p&gt;
&lt;code&gt;(member foo bar)&lt;/code&gt;
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
:to-be-close-to&lt;dd&gt;
&lt;p&gt;
&lt;code&gt;(foo bar precisision)&lt;/code&gt;
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
:to-throw&lt;dd&gt;
&lt;p&gt;
&lt;code&gt;(expr &amp;amp;optional signal signal-args)&lt;/code&gt;
&lt;/p&gt;
&lt;dd&gt;
&lt;/dl&gt;
&lt;p&gt;
Some other more advanced matchers include: &lt;code&gt;:to-have-same-items-as&lt;/code&gt;, &lt;code&gt;:to-match&lt;/code&gt;, and &lt;code&gt;:to-have-been-called&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
These matchers may be combined too: eg. &lt;code&gt;(expect 4 :not :to-be-greater-than 5)&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Matchers are more than just transforms+comparisons. They give information about
the failure.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Example Matchers&amp;#34;&lt;/span&gt;
  (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;regexes&amp;#34;&lt;/span&gt;
    (expect (s-concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#e6db74&#34;&gt;:to-match&lt;/span&gt; (rx word-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; word-end))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;Expected `(s-concat &amp;#34;foo&amp;#34; &amp;#34;bar&amp;#34;)&amp;#39; with value &amp;#34;foobar&amp;#34; to match the regexp &amp;#34;\\&amp;lt;foo\\&amp;gt;&amp;#34;, but instead it was &amp;#34;foobar&amp;#34;.&lt;/code&gt;
&lt;/p&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Running It
&lt;/h3&gt;
&lt;p&gt;
I recommend using &lt;code&gt;Cask&lt;/code&gt; and executing tests with &lt;code&gt;cask exec buttercup -L .&lt;/code&gt; in the project root.
&lt;/p&gt;
&lt;p&gt;
For example, have a file named &lt;code&gt;Cask&lt;/code&gt; in the project root with:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(source gnu)
(source melpa)

(package-file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-stuff-i-beg-you-mode.el&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Project Dependencies&lt;/span&gt;
(depends-on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dash&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Additional Testing Dependencies&lt;/span&gt;
(development
 (depends-on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;buttercup&amp;#34;&lt;/span&gt;)
 (depends-on &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;faceup&amp;#34;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
A folder named &lt;code&gt;test/&lt;/code&gt; should be present and contain &lt;code&gt;test-stuff-i-beg-you-mode-test.el&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This file should have your tests, set up the load path if needed, and require
everything you need.
&lt;/p&gt;
&lt;p&gt;
Lastly I will mention some other useful features before diving in to Buttercup:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Variables can be defined with let syntax with &lt;code&gt;:var&lt;/code&gt; in &lt;code&gt;describe&lt;/code&gt; blocks.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Buttercup has good support for spying on function calls.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Adding an &lt;code&gt;x&lt;/code&gt;, so it&amp;#39;s &lt;code&gt;xit&lt;/code&gt; and &lt;code&gt;xdescribe&lt;/code&gt;, mark the test as pending so it
won&amp;#39;t be executed.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;headline-6&#34;&gt;
Case Study: Testing Indentation
&lt;/h1&gt;
&lt;p&gt;
You have written &lt;code&gt;yet-another-lisp-like-mode&lt;/code&gt; you affectionately call &lt;code&gt;yall-mode&lt;/code&gt; and want to test its indentation.
&lt;/p&gt;
&lt;p&gt;
Lets write a skeleton to test the simplest cases:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Want to test these two cases:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (foo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;  bar)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; (foo bar&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;      baz)&lt;/span&gt;

(&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Indentation&amp;#34;&lt;/span&gt;
  (before-all (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; indent-line-function &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;yall-indent-line))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;standard cases&amp;#34;&lt;/span&gt;
    (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;opening line has one sexp - so indentation doesn&amp;#39;t carry&amp;#34;&lt;/span&gt;
      (expect ???))

    (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;opening line has two+ sexps - so indentation carries&amp;#34;&lt;/span&gt;
      (expect ???))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To test indentation - all we need is the text we expect, as the text alone
determines the indent.
&lt;/p&gt;
&lt;p&gt;
Buttercup allows us to achieve this via &lt;strong&gt;custom matchers&lt;/strong&gt;. We can bypass &lt;em&gt;all
boilerplate&lt;/em&gt; and write our expectations as simply as:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(expect &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(foo
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; bar)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:indented&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The macro &lt;code&gt;buttercup-define-matcher&lt;/code&gt; allows defining our own matcher, that will
perform transforms, assertions, and &lt;em&gt;give descriptive failures&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
Lets implement our &lt;code&gt;:indented&lt;/code&gt; matcher:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun yall-trim-indent (text)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Remove indentation from TEXT.&amp;#34;&lt;/span&gt;
  (-&amp;gt;&amp;gt; text s-lines (-map &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;s-trim-left) (s-join &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)))

(defun yall-buffer-string ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return buffer as text with beginning and ending empty space trimmed.&amp;#34;&lt;/span&gt;
  (s-trim (buffer-substring-no-properties (point-min) (point-max))))

(buttercup-define-matcher &lt;span style=&#34;color:#e6db74&#34;&gt;:indented&lt;/span&gt; (text)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((text (s-trim (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; text)))
         (text-no-indent (yall-trim-indent text)))
    (insert text-no-indent)
    (indent-region-line-by-line (point-min) (point-max))

    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((text-with-indent (yall-buffer-string)))
      (delete-region (point-min) (point-max))

      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;string=&lt;/span&gt; text text-with-indent)
          &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nGiven indented text \n%s\nwas instead indented to \n%s\n&amp;#34;&lt;/span&gt;
                         text text-with-indent))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we can see the power of buttercup when we accidentally write:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Indentation&amp;#34;&lt;/span&gt;
  (before-all (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; indent-line-function &lt;span style=&#34;color:#a6e22e&#34;&gt;#&amp;#39;&lt;/span&gt;yall-indent-line))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;standard cases&amp;#34;&lt;/span&gt;
    (it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;opening line has two+ sexps - so indentation carries&amp;#34;&lt;/span&gt;
      (expect &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(foo bar
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      baz)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:indented&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
and are given the failure:
&lt;/p&gt;
&lt;pre class=&#34;example&#34;&gt;
FAILED:
Given indented text
(foo bar
      baz)
was instead indented to
(foo bar
     baz)
&lt;/pre&gt;
&lt;p&gt;
We know exactly what went wrong, with nearly all the implementation details
separated from the testcase with boilerplate just &lt;code&gt;:indented&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Testing Emacs programs doesn&amp;#39;t have to be painful - buttercup is a great and
battle-tested library for writing quality Emacs programs.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pretty for loops</title>
      <link>https://ekaschalk.github.io/post/pretty-for-loops/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/pretty-for-loops/</guid>
      <description>
&lt;p&gt;
&lt;a href=&#34;https://www.reddit.com/r/emacs/comments/8jlmcr/display_for_each_loops_in_a_mathematical_maner/&#34;&gt;This reddit post&lt;/a&gt; posed a fun challenge: display &lt;code&gt;for(auto&amp;amp;&amp;amp; foo : bar){...}&lt;/code&gt; with mathematical notation.
&lt;/p&gt;
&lt;p&gt;
In python this is trivial with &lt;code&gt;prettify-symbols-mode&lt;/code&gt; as its syntax is simply &lt;code&gt;for foo in bar:&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/pretty-for-loops.png&#34; alt=&#34;/img/pretty-for-loops.png&#34; title=&#34;/img/pretty-for-loops.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
Turns out is possible… whether it is a good idea or not is still questionable.
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
How it works
&lt;/h1&gt;
&lt;p&gt;
First we write a regex for the for-auto construct. Two groups are set, one for
locating the for-all symbol and another for the in symbol. The &lt;code&gt;rx&lt;/code&gt; macro makes
this rather large regex a breeze.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; pretty-for-rgx
      (rx (group &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;for(auto&amp;amp;&amp;amp;&amp;#34;&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; space)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; space)
          (group &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; space)
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we need to compose the symbols.
&lt;/p&gt;
&lt;p&gt;
Ligatures in Emacs are typically set via &lt;code&gt;prettyify-symbols-mode&lt;/code&gt; or manually
through hacking &lt;code&gt;compose-region&lt;/code&gt; into &lt;code&gt;font-lock-mode&lt;/code&gt; syntax highlighting.
&lt;/p&gt;
&lt;p&gt;
Personal ligatures are typically done through prettify, for instance replacing
lambdas with the greek lambda symbol, or simple for/in loops in Python.
&lt;/p&gt;
&lt;p&gt;
Ligatures from fonts, like Fira code, are typically done through
&lt;code&gt;compose-region&lt;/code&gt; calls.
&lt;/p&gt;
&lt;p&gt;
We need to go the composition route here.
&lt;/p&gt;
&lt;p&gt;
We write a hook updating &lt;code&gt;font-lock-keywords&lt;/code&gt; with the composition regex.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun pretty-for-add ()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; font-lock-keywords &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (font-lock-add-keywords
   &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;((&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;pretty-for-rgx &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (prog1 &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                          (compose-region
                           (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                           &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(?\∀ (Br &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; Bl) ?\())
                          (compose-region
                           (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
                           &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#x2203&lt;/span&gt;))))))))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-for-add&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Notice that in &lt;code&gt;for(auto&amp;amp;&amp;amp; ...&lt;/code&gt; we are replacing both the for and auto but keeping
the parenthesis. The &lt;code&gt;(Br . Bl)&lt;/code&gt; is a &lt;code&gt;composition rule&lt;/code&gt; that allows attaching
the for-all symbol and the parenthesis.
&lt;/p&gt;
&lt;p&gt;
We set font lock keywords to nil because some keyword(s) are interfering with
the compositions. If anyone has the interest to figure out which ones, please
leave a comment here.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Syntax Highlighting - Variable Assignments</title>
      <link>https://ekaschalk.github.io/post/advanced-syntax/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/advanced-syntax/</guid>
      <description>
&lt;p&gt;
Variable assignments in Emacs lisp are not highlighted.
&lt;/p&gt;
&lt;p&gt;
That is, &lt;code&gt;(setq foo bar)&lt;/code&gt; will not apply &lt;code&gt;font-lock-variable-name-face&lt;/code&gt; to &lt;code&gt;foo&lt;/code&gt;.
This case is easy enough to implement via regex.
&lt;/p&gt;
&lt;p&gt;
But in Emacs lisp, assignment is variadic, accepting alternating name-value pairs.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; foo bar
      foo (more stuff) foo bar)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
How can we hope to highlight all the &lt;code&gt;foo&lt;/code&gt;?
&lt;/p&gt;
&lt;p&gt;
In this post I demonstrate syntax-traversing highlighting, as applied to variable
assignments.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/setv-highlighting-example.png&#34; alt=&#34;/img/setv-highlighting-example.png&#34; title=&#34;/img/setv-highlighting-example.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
Plus and minus denote the name/value pairs. Names that are forms are not
highlighted, as desired.
&lt;/p&gt;
&lt;p&gt;
In this post I reference a &lt;code&gt;setv&lt;/code&gt; instead of &lt;code&gt;setq&lt;/code&gt;. Snippets depend on &lt;code&gt;dash&lt;/code&gt; and &lt;code&gt;smartparens&lt;/code&gt;.
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Syntax Highlighting
&lt;/h1&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Intro
&lt;/h2&gt;
&lt;p&gt;
Font locks are widely used in Emacs, responsible for most syntax highlighting.
&lt;/p&gt;
&lt;p&gt;
Typically regexes and faces are paired together. The single pair case can be
handled by adding the following list to &lt;code&gt;font-lock-keywords&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; setv-rgx
      (rx symbol-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setv&amp;#34;&lt;/span&gt; symbol-end (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; space) (group (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; setv-font-lock-kwd
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; setv-rgx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; font-lock-variable-name-face)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
See &amp;lt;a href=&amp;#39;/post/major-mode-part-1/&amp;#39;&amp;gt;my post on writing a major
mode&amp;lt;/a&amp;gt; for more examples of font-locking.
&lt;/p&gt;
&lt;p&gt;
For most all cases, regexes are sufficient.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Recursive Highlighting
&lt;/h2&gt;
&lt;p&gt;
Lets look at the smaller case of highlighting every other word occuring after &lt;code&gt;setv&lt;/code&gt; in:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(setv foo bar foo bar foo bar)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We have an indeterminate number of alternating pairs.
&lt;/p&gt;
&lt;p&gt;
For this usecase, &lt;code&gt;font-lock-keywords&lt;/code&gt; exposes something called &amp;#34;match anchors&amp;#34;.
That is, we anchor on some initial match, the &lt;code&gt;setv&lt;/code&gt;, and then repeatedly
try another match.
&lt;/p&gt;
&lt;p&gt;
Lets update our font lock keyword to match every other word:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; every-other-word-rgx
      (rx (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word) (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; not-wordchar) (group (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word))))

(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;setv-font-lock-kwd&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; every-other-word-rgx
                   &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; font-lock-variable-name-face)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we have every other word highlighting.
&lt;/p&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Multiline Highlighting
&lt;/h2&gt;
&lt;p&gt;
Lets extend our example to span multiple lines:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(setv foo bar foo bar foo bar
      foo bar)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Font lock mode doesn&amp;#39;t run over multiple lines by default. We can tell font lock
mode to allow line-spanning highlights by setting &lt;code&gt;font-lock-multiline&lt;/code&gt; to true.
&lt;/p&gt;
&lt;p&gt;
But this isn&amp;#39;t enough. How would it know when to stop finding every other word?
&lt;/p&gt;
&lt;p&gt;
The two &lt;code&gt;nil&lt;/code&gt; values in our keyword were for the &lt;code&gt;PRE-MATCH-FORM&lt;/code&gt; and &lt;code&gt;POST-MATCH-FORM&lt;/code&gt;. These allow extra flexibility over regexes for moving the point around during the traversal. Additionally, the &lt;code&gt;PRE-MATCH-FORM&lt;/code&gt; can return a point, which is used as the limit to the anchor.
&lt;/p&gt;
&lt;p&gt;
So lets define a trivial pre-match function that tells font lock mode to check
the next line when the anchor &lt;code&gt;setv&lt;/code&gt; is encountered.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun setv-pre-match-form ()
  (forward-line))

(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;setv-font-lock-kwd&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; every-other-word-rgx
                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(setv-pre-match-form) &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
                   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; font-lock-variable-name-face)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Closer now, the example works and can be adjusted quite easily to determine the
right number of lines to move forward.
&lt;/p&gt;
&lt;p&gt;
But, performing edits on one line can cause inconsistent changes or even lose
highlighting entirely on other lines.
&lt;/p&gt;
&lt;p&gt;
What is going wrong?
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Font Lock Regions
&lt;/h2&gt;
&lt;p&gt;
Editing within an assignment can cause the search for the anchored &lt;code&gt;setv&lt;/code&gt; to
occur from any point within the form. So finding the anchor will be unreliable.
&lt;/p&gt;
&lt;p&gt;
Naturally the thought is: what if we traverse to the beginning of the form in
the &lt;code&gt;setv-pre-match-form&lt;/code&gt; so we always catch the match?
&lt;/p&gt;
&lt;p&gt;
This turns out to fail as we might encounter multiple start/end combinations
each within the same &lt;code&gt;setv&lt;/code&gt; form, whom will buggily interact, overwrite, and
possibly miss names entirely.
&lt;/p&gt;
&lt;p&gt;
The arcane &lt;code&gt;font-lock-extend-region-functions&lt;/code&gt; is responsible for setting the
begin and end search regions of multiline fontifications.
&lt;/p&gt;
&lt;p&gt;
Its documentation puts it well:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Its most common use is to solve the problem of &lt;em&gt;identification&lt;/em&gt; of multiline elements by providing a function that tries to find such elements and move the boundaries such that they do not fall in the middle of one.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Promising!
&lt;/p&gt;
&lt;p&gt;
Before we dive into it, lets understand the other remaining highlighting methods.
&lt;/p&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Font Locking with Functions
&lt;/h2&gt;
&lt;p&gt;
The &lt;code&gt;MATCHER&lt;/code&gt; is the first form in a font lock keyword. The previous examples
have it taking the value of a regex.
&lt;/p&gt;
&lt;p&gt;
It can also be a function of one argument, a limiting point, that sets the &lt;code&gt;match-data&lt;/code&gt; just as a regexp would, returning true if a match occurred.
&lt;/p&gt;
&lt;p&gt;
The following would be equivalent to having &lt;code&gt;setv-rgx&lt;/code&gt; as the &lt;code&gt;MATCHER&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun match-setv (limit)
  (re-search-forward setv-rgx limit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
But now we can do a lot more.
&lt;/p&gt;
&lt;p&gt;
Lets restrict to matching &lt;code&gt;setv&lt;/code&gt; that are only one parenthesis deep.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun match-setv (limit)
  (and (re-search-forward setv-rgx limit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
       (&lt;span style=&#34;color:#a6e22e&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (syntax-ppss)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This matcher performs highlighting conditional on the syntax!
&lt;/p&gt;
&lt;p&gt;
We now have the building blocks of syntax-traversing highlighting.
&lt;/p&gt;
&lt;h1 id=&#34;headline-7&#34;&gt;
Solution
&lt;/h1&gt;
&lt;p&gt;
A fully self-contained &lt;code&gt;setv-mode&lt;/code&gt; to try out:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; setv-rgx (rx symbol-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setv&amp;#34;&lt;/span&gt; symbol-end (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; space) (group (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word))))
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; setv-current-depth &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)

(defun setv-font-lock-extend-region ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Extend assignment forms&amp;#39; regions, see `font-lock-extend-region-functions&amp;#39;.&amp;#34;&lt;/span&gt;
  (save-excursion
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((start-beg font-lock-beg)
          (start-end font-lock-end)
          (depth (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (syntax-ppss))))
      (when (and (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; depth)
                 (sp-beginning-of-sexp)
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;string=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;setv&amp;#34;&lt;/span&gt; (thing-at-point &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&lt;/span&gt;)))

        (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; setv-current-depth depth)

        (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; font-lock-beg (&lt;span style=&#34;color:#a6e22e&#34;&gt;1-&lt;/span&gt; (point)))
        (sp-end-of-sexp)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; font-lock-end (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (point)))

        (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;/=&lt;/span&gt; start-beg font-lock-beg)  &lt;span style=&#34;color:#75715e&#34;&gt;; Signal possible changes to font-lock&lt;/span&gt;
            (&lt;span style=&#34;color:#a6e22e&#34;&gt;/=&lt;/span&gt; start-end font-lock-end))))))

(defun setv-match-assignments (limit)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recursively set `match-data&amp;#39; assignment names containing point until LIMIT.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`setv-font-lock-extend-region&amp;#39; prepares this function to:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1. Not traverse the same assignment form twice.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2. Have the initial call at form&amp;#39;s start and passed limit at form&amp;#39;s end.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The first name in each assignment is highlighted via a standard regex, so as to
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;keep the initial condition simple.&amp;#34;&lt;/span&gt;
  (-when-let* ((start (point))
               (_ (sp-beginning-of-sexp))
               (_ (re-search-forward setv-rgx limit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
    (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; start (point))  &lt;span style=&#34;color:#75715e&#34;&gt;; Resume traversal at last symbol&lt;/span&gt;
      (goto-char start))

    (sp-forward-sexp)

    (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; (point) limit)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; matched-word? (re-search-forward (rx (group (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word))) limit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; descended? (and setv-current-depth
                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (syntax-ppss))
                               setv-current-depth)))

      (or (and matched-word? descended?
               (sp-up-sexp)
               (setv-match-assignments limit))
          matched-word?
          (setv-match-assignments limit)))))

(define-derived-mode setv-mode lisp-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setv&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; font-lock-multiline &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-extend-region-functions&lt;/span&gt;
               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;setv-font-lock-extend-region&lt;/span&gt;)

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; setv-font-lock-kwds
        &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;((setv-match-assignments &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; font-lock-variable-name-face)
          (&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;setv-rgx &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; font-lock-variable-name-face)))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; font-lock-defaults
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(setv-font-lock-kwds
          &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
          ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+-*/.&amp;lt;&amp;gt;=!?$%_&amp;amp;~^:@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;))
          &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
          (font-lock-mark-block-function &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mark-defun))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I collapsed it into a major mode to allow for &lt;code&gt;M-x setv-mode&lt;/code&gt; to try out the highlighting yourself.
&lt;/p&gt;
&lt;p&gt;
Lets break down what is occurring in each step:
&lt;/p&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
Extending the region
&lt;/h3&gt;
&lt;p&gt;
We check if the form-opener containing point is an assignment.
&lt;/p&gt;
&lt;p&gt;
If it is we must conform to font-lock-mode&amp;#39;s bookkeeping by:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Setting the dynamically bound &lt;code&gt;font-lock-beg&lt;/code&gt; and &lt;code&gt;font-lock-end&lt;/code&gt; to the
desired start/end of the form, for only assignment forms.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Tracking the depth of the assignment. The region expansion occurs once per
assignment while the searching is recursive, so we set the depth at
expansion-time.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Return whether the start or end changed during the region expansion.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
Searching for assignments
&lt;/h3&gt;
&lt;p&gt;
Extending the region leaves us with the current point at the assignment form&amp;#39;s
opening and the limit at its close, and we will not restart the search from
somewhere else within the form.
&lt;/p&gt;
&lt;p&gt;
But we don&amp;#39;t know whether the form is an assignment, we only know that the
bounds are correct in the case that it is.
&lt;/p&gt;
&lt;p&gt;
So first we check that the region we are considering is an assignment.
We jump past one sexp, namely the value, and set match-data to the following
with a regex search, as required by font-lock internals.
&lt;/p&gt;
&lt;p&gt;
Now this match doesn&amp;#39;t consider syntax, unlike the first jump. We check that we
didn&amp;#39;t just move forward into an embedded form. If we did, we need to skip this
pair as we both do not want to highlight the form, and it would interfere with
the &lt;code&gt;sp-beginning-of-sexp&lt;/code&gt; on future calls. So we jump out and recurse.
&lt;/p&gt;
&lt;h1 id=&#34;headline-10&#34;&gt;
Conclusions
&lt;/h1&gt;
&lt;p&gt;
The example mode demonstrates a particularly difficult form of
syntax-highlighting and pulls together many more advanced features of Emac&amp;#39;s &lt;code&gt;font-lock-mode&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
However there are still issues:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
There is a performance cost to multiline highlighting, as noted in its documentation. How significant the impact is something I do not understand well yet.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
While the names that are highlighted appear to be correct, application of highlighting to every name at all times is still inconsistent and might require edits on nearby parts of the buffer to take effect. My hunch is to investigate the other two region extension functions.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Altogether I&amp;#39;m once again impressed at the flexibility Emacs offers to tailor
the display of text to your liking.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep diving into a major mode - Part 2 (IDE Features)</title>
      <link>https://ekaschalk.github.io/post/major-mode-part-2/</link>
      <pubDate>Sun, 29 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/major-mode-part-2/</guid>
      <description>
&lt;p&gt;
In &amp;lt;a href=&amp;#39;/post/major-mode-part-1/&amp;#39;&amp;gt;Part 1&amp;lt;/a&amp;gt; I addressed:
syntax tables, indentation, font locking, and context-sensitive syntax.
&lt;/p&gt;
&lt;p&gt;
We now build out a &amp;#34;Hyde&amp;#34; with: shell/async process integration, Eldoc support,
and Autocompletion. Also &amp;#34;shift-K&amp;#34; documentation lookup for the symbol-at-point.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/eldoc-auto.png&#34; alt=&#34;/img/eldoc-auto.png&#34; title=&#34;/img/eldoc-auto.png&#34; /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Building Inferior Hy
&lt;/h1&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
The basics
&lt;/h2&gt;
&lt;p&gt;
The easiest way to add a REPL to your major-mode is through setting the variable
&lt;code&gt;inferior-lisp-program&lt;/code&gt;, possibly adding setup code through
&lt;code&gt;inferior-lisp-load-command&lt;/code&gt;, then running the &lt;code&gt;inferior-lisp&lt;/code&gt; command.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; within the define-derived-mode hy-mode setup...&lt;/span&gt;
(setq-local inferior-lisp-program &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hy&amp;#34;&lt;/span&gt;)
(setq-local inferior-lisp-load-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(print \&amp;#34;Hy there!\&amp;#34;)&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This isn&amp;#39;t sufficient for advanced shells. The custom is to create a
function named &lt;code&gt;run-hy&lt;/code&gt; (eg. there is &lt;code&gt;run-python&lt;/code&gt;, &lt;code&gt;run-haskell&lt;/code&gt;…)
which starts up the shell, sets &lt;code&gt;inferior-hy-mode&lt;/code&gt; , and switches to the
shell.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Comint-mode
&lt;/h2&gt;
&lt;p&gt;
It is a &amp;#34;Major mode for interacting with an inferior interpreter&amp;#34;. Most-all
inferior modes will derive from &lt;code&gt;comint-mode&lt;/code&gt;. It provides many utilities for
interacting with shell-like processes.
&lt;/p&gt;
&lt;p&gt;
Hy mode&amp;#39;s prompt is a right arrow.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(define-derived-mode inferior-hy-mode comint-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inferior Hy&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Major mode for Hy inferior process.&amp;#34;&lt;/span&gt;
  (setq-local indent-tabs-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)

  &lt;span style=&#34;color:#75715e&#34;&gt;;; How to dispaly the process status in the mode-line&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; mode-line-process &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:%s&amp;#34;&lt;/span&gt;))
  &lt;span style=&#34;color:#75715e&#34;&gt;;; This disables editing and traversing the &amp;#34;=&amp;gt;&amp;#34; prompts&lt;/span&gt;
  (setq-local comint-prompt-read-only &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Lets comint mode recognize the prompt&lt;/span&gt;
  (setq-local comint-prompt-regexp (rx bol &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;gt;&amp;#34;&lt;/span&gt; space))

  &lt;span style=&#34;color:#75715e&#34;&gt;;; ... other specialized config introduced later ...&lt;/span&gt;
  )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There are several comint components we will make use of:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;comint-last-prompt&lt;/code&gt; - a cons cell of begin/end markers of last prompt.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;comint-send-string&lt;/code&gt; - perform &lt;code&gt;process-send-string&lt;/code&gt; with comint
bookkeeping.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;comint-redirect-send-command-to-process&lt;/code&gt; and &lt;code&gt;comint-redirect-completed&lt;/code&gt; - for sending strings asynchronously.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;comint-(pre)output-filter-functions&lt;/code&gt; - entry points into capturing and
cleaning process output.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;make-comint-in-buffer&lt;/code&gt; - entry point into comint mode.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Managing buffers and processes
&lt;/h2&gt;
&lt;p&gt;
We must manage: the standard hy shell process, the internal hy process used
for autocompletion and eldoc, and temporal buffers for more advanced buffer
transformations of the standard hy shell process.
&lt;/p&gt;
&lt;p&gt;
The configuration required of &lt;code&gt;inferior-hy-mode&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;;; Configuration&lt;/span&gt;

(defconst hy-shell-interpreter &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hy&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default Hy interpreter name.&amp;#34;&lt;/span&gt;)

(defvar hy-shell-interpreter-args &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--spy&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default arguments for Hy interpreter.&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Internal&lt;/span&gt;

(defconst hy-shell-buffer-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default buffer name for Hy interpreter.&amp;#34;&lt;/span&gt;)

(defconst hy-shell-internal-buffer-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy Internal&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Default buffer name for the internal Hy process.&amp;#34;&lt;/span&gt;)

(defvar hy-shell-buffer &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current shell buffer for Hy.&amp;#34;&lt;/span&gt;)

(defvar hy--shell-output-filter-in-progress &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whether we are waiting for output in `hy-shell-send-string-no-output&amp;#39;.&amp;#34;&lt;/span&gt;)

(defvar hy--shell-font-lock-enable &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Whether the shell should font-lock the current line.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now the building blocks of the shell can be defined.
&lt;/p&gt;
&lt;p&gt;
The implementations are rather straightforward. To keep space down, only
name and docstring are provided:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--shell-format-process-name (proc-name)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Format a PROC-NAME with closing astericks.&amp;#34;&lt;/span&gt;)

(defun hy-shell-get-process (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; internal)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get process corr. to `hy-shell-buffer-name&amp;#39;/`hy-shell-internal-buffer-name&amp;#39;.&amp;#34;&lt;/span&gt;)

(defun hy--shell-current-buffer-process ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get process associated with current buffer.&amp;#34;&lt;/span&gt;)

(defun hy--shell-current-buffer-a-process? ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is `current-buffer&amp;#39; a live process?&amp;#34;&lt;/span&gt;)

(defun hy--shell-get-or-create-buffer ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get or create `hy-shell-buffer&amp;#39; buffer for current hy shell process.&amp;#34;&lt;/span&gt;)

(defun hy--shell-buffer? ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is `hy-shell-buffer&amp;#39; set and does it exist?&amp;#34;&lt;/span&gt;)

(defun hy--shell-kill-buffer ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Kill `hy-shell-buffer&amp;#39;.&amp;#34;&lt;/span&gt;)

(defun hy--shell-calculate-command (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; internal)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Calculate the string used to execute the inferior Hy process.&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Straightforward string formatting - see: `shell-quote-argument&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Starting up the shell
&lt;/h2&gt;
&lt;p&gt;
The commands above are enough to build out some basic shell support. Lets
look at &lt;code&gt;run-hy&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun run-hy (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; cmd)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run an inferior Hy process.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;CMD defaults to the result of `hy--shell-calculate-command&amp;#39;.&amp;#34;&lt;/span&gt;
  (interactive)
  (unless (executable-find &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hy&amp;#34;&lt;/span&gt;)
    (message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy not found, activate a virtual environment with Hy.&amp;#34;&lt;/span&gt;))

  (-&amp;gt; (or cmd (hy--shell-calculate-command))
     (hy--shell-make-comint hy-shell-buffer-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;show&lt;/span&gt;)
     get-buffer-process))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Most of the work is delegated to &lt;code&gt;hy--shell-make-comint&lt;/code&gt; as we also must
have the internal variant:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun run-hy-internal ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start an inferior hy process in the background for autocompletion.&amp;#34;&lt;/span&gt;
  (interactive)
  (unless (executable-find &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hy&amp;#34;&lt;/span&gt;)
    (message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy not found, activate a virtual environment containing Hy to use
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Eldoc, Anaconda, and other hy-mode features.&amp;#34;&lt;/span&gt;))

  (when (and (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (hy-shell-get-process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;internal&lt;/span&gt;))
             (executable-find &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hy&amp;#34;&lt;/span&gt;))
    (-let [hy--shell-font-lock-enable
           nil]
      (prog1
          (-&amp;gt; (hy--shell-calculate-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;internal&lt;/span&gt;)
             (hy--shell-make-comint hy-shell-internal-buffer-name &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;internal&lt;/span&gt;)
             get-buffer-process)
        (hy--shell-send-internal-setup-code)
        (message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy internal process successfully started&amp;#34;&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is a simple variation of &lt;code&gt;run-hy&lt;/code&gt; that passes the internal argument
through the hy shell building blocks and also sends setup code for
&lt;code&gt;eldoc-mode&lt;/code&gt; and &lt;code&gt;company-mode&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Now we are ready to startup our &lt;code&gt;inferior-hy-mode&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--shell-make-comint (cmd proc-name &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; show internal)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create and return comint process PROC-NAME with CMD, opt. INTERNAL and SHOW.&amp;#34;&lt;/span&gt;
  (-when-let* ((proc-buffer-name
                (hy--shell-format-process-name proc-name))
               (_
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (comint-check-proc proc-buffer-name)))
               (cmdlist
                (split-string-and-unquote cmd))
               (buffer
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;make-comint-in-buffer&lt;/span&gt; proc-name proc-buffer-name
                       (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; cmdlist) &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; cmdlist)))
               (process
                (get-buffer-process buffer)))
    (with-current-buffer buffer
      (inferior-hy-mode))
    (when show
      (display-buffer buffer))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; internal
        (set-process-query-on-exit-flag process &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; hy-shell-buffer buffer))
    proc-buffer-name))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
All the work is once again delegated to our shell building blocks. There are
several things to notice:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If the process is meant to be autostarted/quited, make sure to use &lt;code&gt;set-process-query-on-exit-flag&lt;/code&gt; to nil.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The &lt;code&gt;cmdlist&lt;/code&gt; car is &amp;#34;hy&amp;#34; and cdr is the hy interpreter arguments.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Further accessing of the shell is done with the &lt;code&gt;hy-shell-buffer&lt;/code&gt; variable.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Working with the shell
&lt;/h2&gt;
&lt;p&gt;
The shell is now functional, but we still don&amp;#39;t have methods to send strings
to the shell (for instance, sending the current-form or the buffer for
evaluation). Nor do we have any support for asynchronously sending and
extracting information from our internal process.
&lt;/p&gt;
&lt;p&gt;
Like always, lets define some utilities:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--shell-end-of-output? (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return non-nil if STRING ends with the prompt.&amp;#34;&lt;/span&gt;
  (s-matches? comint-prompt-regexp &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;))

(defun hy--shell-output-filter (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;If STRING ends with input prompt then set filter in progress done.&amp;#34;&lt;/span&gt;
  (when (hy--shell-end-of-output? &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; hy--shell-output-filter-in-progress &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n=&amp;gt; &amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;hy--shell-output-filter-in-progress&lt;/code&gt; is the critical component. Lets see how
it is used:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--shell-send-string (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; process internal)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Internal implementation of shell send string functionality.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((process (or process (hy-shell-get-process internal)))
        (hy--shell-output-filter-in-progress &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
    (comint-send-string process &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
    (while hy--shell-output-filter-in-progress
      (accept-process-output process))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The shell process is obtained, we set it to be in progress, and send it off
to comint. But how and when is the filter reset?
&lt;/p&gt;
&lt;p&gt;
We come back to the &lt;code&gt;comint-(pre)output-filter-functions&lt;/code&gt;. When we send the
string via &lt;code&gt;comint-send-string&lt;/code&gt;, part of its bookkeeping is to apply these
filter functions to the output. However, the output can come in chunks, so
simply accepting the process output is not sufficient. We must recognize
when the last of the expected process output is retrieved and signal to stop
accepting output.
&lt;/p&gt;
&lt;p&gt;
The difference between the pre and standard filters is when they are
applied. The pre variation is executed before the process output is inserted
into the buffer.
&lt;/p&gt;
&lt;p&gt;
Looking back to &lt;code&gt;hy--shell-output-filter&lt;/code&gt;, what are the outcomes of using it
as a pre or standard filter? Lets look at the exposed send strings:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy-shell-send-string-no-output (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; process internal)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Send STRING to hy PROCESS and inhibit printing output.&amp;#34;&lt;/span&gt;
  (-let [comint-preoutput-filter-functions
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(hy--shell-output-filter)]
    (hy--shell-send-string &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; process internal)))

(defun hy-shell-send-string (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; process)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Send STRING to hy PROCESS.&amp;#34;&lt;/span&gt;
  (-let [comint-output-filter-functions
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(hy--shell-output-filter)]
    (hy--shell-send-string &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; process)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Lastly, these functions won&amp;#39;t work for asynchronous ops like Eldoc and
Autocompletion. You will see a &lt;code&gt;Blocking call inhibiting process output&lt;/code&gt; error messaged in the minibuffer.
&lt;/p&gt;
&lt;p&gt;
The asynchronous version is different. We redirect the process output to a
temporary buffer and capture its output.
&lt;/p&gt;
&lt;p&gt;
The key is the 100ms &lt;code&gt;timeout&lt;/code&gt; argument passed to &lt;code&gt;accept-process-output&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--shell-send-async (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Send STRING to internal hy process asynchronously.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((output-buffer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; *Comint Hy Redirect Work Buffer*&amp;#34;&lt;/span&gt;)
        (proc (hy-shell-get-process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;internal&lt;/span&gt;)))
    (with-current-buffer (get-buffer-create output-buffer)
      (erase-buffer)
      (comint-redirect-send-command-to-process &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; output-buffer proc &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

      (set-buffer (process-buffer proc))
      (while (and (&lt;span style=&#34;color:#a6e22e&#34;&gt;null&lt;/span&gt; comint-redirect-completed)
                  (accept-process-output proc &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
      (set-buffer output-buffer)
      (buffer-string))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Our shell is now ready for autocompletion, eldoc, and other awesome IDE features.
&lt;/p&gt;
&lt;p&gt;
I originally planned to go into font-locking the prompt input (highly
non-trivial), but given the length of this post I will provide and link to
it as a separate future post.
&lt;/p&gt;
&lt;h1 id=&#34;headline-7&#34;&gt;
Autocompletion
&lt;/h1&gt;
&lt;p&gt;
All the work for autocompletion was in setting up the asynchronous process
support. Lets see how easy autocompletion becomes:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy-company-setup-code
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(import [hy.completer [Completer]])
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(setv --HYCOMPANY (Completer))&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Autocompletion setup code to send to the internal process.&amp;#34;&lt;/span&gt;)

(defconst hy--company-regexp
  (rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;
      (group (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,]&amp;#34;&lt;/span&gt;))))
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;
      (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Regex to extra candidates from --HYCOMPANY.&amp;#34;&lt;/span&gt;)

(defun hy--company-format-str (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Format STRING to send to hy for completion candidates.&amp;#34;&lt;/span&gt;
  (when &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(.%s --HYCOMPANY \&amp;#34;%s\&amp;#34;)&amp;#34;&lt;/span&gt;
            (cond ((s-starts-with? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;; Tag matches broken in Hy atm&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tag-matches&amp;#34;&lt;/span&gt;)
                  ((s-contains? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attr-matches&amp;#34;&lt;/span&gt;)
                  (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;global-matches&amp;#34;&lt;/span&gt;))
            &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)))

(defun hy--company-candidates (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get candidates for completion of STRING.&amp;#34;&lt;/span&gt;
  (-when-let* ((command (hy--company-format-str &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;))
               (candidates (hy--shell-send-async command))
               (matches (s-match-strings-all hy--company-regexp candidates)))
    (-select-column &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; matches)))  &lt;span style=&#34;color:#75715e&#34;&gt;; Get match-data-1 for each match&lt;/span&gt;

(defun company-hy (command &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; arg &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; ignored)
  (interactive (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;interactive&lt;/span&gt;))
  (cl-case command
    (prefix (company-grab-symbol))
    (candidates (hy--company-candidates arg))
    (meta (-&amp;gt; arg hy--eldoc-get-docs hy--str-or-empty))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;Completer&lt;/code&gt; is a hy builtin that completes a given string and does all the
work here. We simply call it&amp;#39;s appropriate method, extract the items in the
retrieved list, and hand it off to company.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;company-grab-symbol&lt;/code&gt; gets the current symbol which is handed off as &lt;code&gt;arg&lt;/code&gt; in
the subsequent call.
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;meta&lt;/code&gt; argument shows the eldoc output for the current selected company
candidate in the minibuffer, as seen in this post&amp;#39;s initial image.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;company-hy&lt;/code&gt; can then be enabled either through adding to &lt;code&gt;company-backends&lt;/code&gt; or
for Spacemacs users adding:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Technically this should be within a hy layer, but this still works uncaptured&lt;/span&gt;
(spacemacs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt;add-company-backends
  &lt;span style=&#34;color:#e6db74&#34;&gt;:backends&lt;/span&gt; company-hy
  &lt;span style=&#34;color:#e6db74&#34;&gt;:modes&lt;/span&gt; hy-mode inferior-hy-mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Developing a major-mode that accommodates Spacemacs users will be touched on
in future posts.
&lt;/p&gt;
&lt;h1 id=&#34;headline-8&#34;&gt;
Eldoc
&lt;/h1&gt;
&lt;p&gt;
For those unfamiliar, in the initial image &lt;code&gt;eldoc-mode&lt;/code&gt; provides the formatted
docstring and arguments in the minibuffer for the symbol-at-point (or
completion candidate).
&lt;/p&gt;
&lt;p&gt;
Perhaps surprisingly, Eldoc is &lt;em&gt;a lot&lt;/em&gt; more challenging than autocompletion.
&lt;/p&gt;
&lt;p&gt;
For starters, your language won&amp;#39;t provide Eldoc like strings (formatted
argument list + first line of docstring) by default. How difficult inspecting
language constructs is entirely dependent on the language. Hy in particular is
difficult due to how macros are implemented and namespaced. I won&amp;#39;t provide
the &lt;code&gt;hy-eldoc-setup-code&lt;/code&gt; here, it can be found within the source.
&lt;/p&gt;
&lt;p&gt;
Next, your implementation must mirror any relevant DSLs. For lisps, Eldoc
inspects the form opener. It is hydiomatic to:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(setv x &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;)
(&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{} there&amp;#34;&lt;/span&gt; x)
(setv a-list [])
(&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; a-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;friend&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We need to send &lt;code&gt;str.format&lt;/code&gt; and &lt;code&gt;a-list.append&lt;/code&gt; - the form opener alone is
insufficient.
&lt;/p&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
Implementation
&lt;/h2&gt;
&lt;p&gt;
Eldoc is setup via the &lt;code&gt;eldoc-documentation-function&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy-eldoc-documentation-function ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Drives `eldoc-mode&amp;#39;, retrieves eldoc msg string for inner-most symbol.&amp;#34;&lt;/span&gt;
  (-&amp;gt; (hy--eldoc-get-inner-symbol)
     hy--eldoc-get-docs))

(defun hy--mode-setup-eldoc ()
  (make-local-variable &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eldoc-documentation-function&lt;/span&gt;)
  (setq-local eldoc-documentation-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hy-eldoc-documentation-function&lt;/span&gt;)
  (eldoc-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;+1&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
There are three core components:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;hy--eldoc-send&lt;/code&gt; for sending a formatted string and cleaning its output.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;hy--eldoc-get-inner-symbol&lt;/code&gt; getting opening form and completing the dot DSL.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;hy--eldoc-fontify-text&lt;/code&gt; for highlighting the final text string like in the image.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Lets look at fontifying first. We can&amp;#39;t blindly apply Hy&amp;#39;s font-locks as the
docstring isn&amp;#39;t captured in quotes. Since the text is static, we just add the
faces to the string ourselves.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--fontify-text (text regexp &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; faces)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fontify portions of TEXT matching REGEXP with FACES.&amp;#34;&lt;/span&gt;
  (when text
    (-each
        (s-matched-positions-all regexp text)
      (-lambda ((beg &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; end))
        (--each faces
          (add-face-text-property beg end it &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; text))))))

(defun hy--eldoc-fontify-text (text)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fontify eldoc TEXT.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((kwd-rx
         (rx string-start (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (any space &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))
        (kwargs-rx
         (rx symbol-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word)))
        (quoted-args-rx
         (rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;`&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; space)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;`&amp;#34;&lt;/span&gt;)))
    (hy--fontify-text
     text kwd-rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-keyword-face&lt;/span&gt;)
    (hy--fontify-text
     text kwargs-rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-type-face&lt;/span&gt;)
    (hy--fontify-text
     text quoted-args-rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;font-lock-constant-face&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold-italic&lt;/span&gt;))
  text)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Next lets see the sending and formatting of the shell&amp;#39;s raw eldoc output.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--eldoc-send (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Send STRING for eldoc to internal process returning output.&amp;#34;&lt;/span&gt;
  (-&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;
     hy--shell-send-async
     hy--eldoc-chomp-output
     hy--eldoc-remove-syntax-errors
     hy--str-or-nil))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The string/output formatting are implementation details specific to Hy and so
won&amp;#39;t be detailed. If we are dealing with an empty string, we return nil
rather than the empty string to pass-by parent &lt;code&gt;when&lt;/code&gt; clauses.
&lt;/p&gt;
&lt;p&gt;
The meat of Eldoc is in extracting the innermost symbol of the current point
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--eldoc-get-inner-symbol ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Traverse and inspect innermost sexp and return formatted string for eldoc.&amp;#34;&lt;/span&gt;
  (save-excursion
    (-when-let* ((_ (hy-shell-get-process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;internal&lt;/span&gt;))
                 (state (syntax-ppss))
                 (start-pos (hy--sexp-inermost-char state))
                 (_ (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt; (goto-char start-pos)
                           (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (hy--not-function-form-p))))
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt; (forward-char)
                                  (thing-at-point &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&lt;/span&gt;))))

      &lt;span style=&#34;color:#75715e&#34;&gt;;; Attribute method call (eg. &amp;#34;.format str&amp;#34;) needs following sexp&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s-starts-with? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;)
          (when (ignore-errors (forward-sexp) (forward-char) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
            (pcase (char-after)
              &lt;span style=&#34;color:#75715e&#34;&gt;;; Can&amp;#39;t send just .method to eldoc&lt;/span&gt;
              (?\) (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
              (?\s (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
              (?\C-j (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;; newline&lt;/span&gt;

              &lt;span style=&#34;color:#75715e&#34;&gt;;; Dot dsl doesn&amp;#39;t work on literals&lt;/span&gt;
              (?\[ (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;))
              (?\{ (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dict&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;))
              (?\  (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;; the &amp;#34; is deleted in blog as breaks rainbow.js&lt;/span&gt;

              &lt;span style=&#34;color:#75715e&#34;&gt;;; Otherwise complete the dot dsl&lt;/span&gt;
              (_ (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt;
                   (forward-char)
                   (concat (thing-at-point &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;)))))
        &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
So Eldoc&amp;#39;s path is to call &lt;code&gt;hy--eldoc-get-inner-symbol&lt;/code&gt; if an internal process
is active, &lt;code&gt;syntax-ppss&lt;/code&gt; indicates we are within a form, and that the
innermost form is a symbol. The completed string is sent off to the internal
process we&amp;#39;ve built up, the output is chomped of quote characters and the
prompt and syntax errors (eg. completing &amp;#34;str.&amp;#34; while we are still typing)
are ignored. The result is fontified and returned by the documentation function.
&lt;/p&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
Spacemacs shift-k documentation lookup
&lt;/h2&gt;
&lt;p&gt;
A feature of Spacemacs is typing &amp;#34;K&amp;#34; to perform
&lt;code&gt;spacemacs/evil-smart-doc-lookup&lt;/code&gt; to get the full documentation of the
symbol-at-point in a separate buffer.
&lt;/p&gt;
&lt;p&gt;
Using Eldoc&amp;#39;s documentation functions, with slightly different formatting, we
already have most of shift-K implemented.
&lt;/p&gt;
&lt;p&gt;
We moved most of &lt;code&gt;hy-eldoc-documentation-function&lt;/code&gt; into &lt;code&gt;hy--eldoc-get-docs&lt;/code&gt; which
distinctly accepts an optional argument for buffer-style rather than
eldoc-style formatting.
&lt;/p&gt;
&lt;p&gt;
We then create a mirror of the documentation function as
&lt;code&gt;hy--docs-for-thing-at-point&lt;/code&gt;. We format the text to account for newlines
(newlines from process output are escaped so we must trim one backslash from
each newline).
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--docs-for-thing-at-point ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mirrors `hy-eldoc-documentation-function&amp;#39; formatted for a buffer, not a msg.&amp;#34;&lt;/span&gt;
  (-&amp;gt; (thing-at-point &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&lt;/span&gt;)
     (hy--eldoc-get-docs &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
     hy--format-docs-for-buffer))

(defun hy--format-docs-for-buffer (text)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Format raw hydoc TEXT for inserting into hyconda buffer.&amp;#34;&lt;/span&gt;
  (when text
    (-let [kwarg-newline-regexp
           (rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;)))
               (group-n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\\n&amp;#34;&lt;/span&gt;)
               (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;))))]
      (--&amp;gt; text
         (s-replace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\n&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt; it)
         (replace-regexp-in-string kwarg-newline-regexp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newline&amp;#34;&lt;/span&gt; it &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It is interesting how &amp;#34;K&amp;#34; is actually called, I&amp;#39;m not sure if any other
function operates quite the same. &amp;#34;K&amp;#34; calls the function bound to &amp;#34;SPC m h h&amp;#34;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(spacemacs/set-leader-keys-for-major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hy-mode&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hy-describe-thing-at-point&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Lastly we need to create, switch-to, and insert the retrieved docs as &lt;code&gt;hy-describe-thing-at-point&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy-describe-thing-at-point ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Implement shift-k docs lookup for `spacemacs/evil-smart-doc-lookup&amp;#39;.&amp;#34;&lt;/span&gt;
  (interactive)
  (-when-let* ((text (hy--docs-for-thing-at-point))
               (doc-buffer &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*Hyconda*&amp;#34;&lt;/span&gt;))
    (with-current-buffer (get-buffer-create doc-buffer)
      (erase-buffer)
      (switch-to-buffer-other-window doc-buffer)

      (insert text)
      (goto-char (point-min))
      (forward-line)

      (insert &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;------\n&amp;#34;&lt;/span&gt;)
      (fill-region (point) (point-max))

      &lt;span style=&#34;color:#75715e&#34;&gt;;; Eventually make hyconda-view-minor-mode, atm this is sufficient&lt;/span&gt;
      (local-set-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;quit-window&lt;/span&gt;)
      (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;fboundp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-local-set-key&lt;/span&gt;)
        (evil-local-set-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;quit-window&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;headline-11&#34;&gt;
Closing
&lt;/h1&gt;
&lt;p&gt;
There are several other features worth discussion like font-locking the
shell prompt input and the &lt;code&gt;send-(form/region/buffer)-to-shell&lt;/code&gt; that are
sizable enough to warrant their own posts later. With this post, the series is
caught up to the current featureset. Linting would be the next big problem to
attack. I&amp;#39;d also like to integrate &lt;code&gt;ert&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Going without Company and Eldoc has helped me appreciate the value in IDEs.
Hy is quickly becoming a pleasant development experience.
&lt;/p&gt;
&lt;p&gt;
My only guidance was source code. I hope this series make the problem more
tractable for prospective major mode authors.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving ligature spacing in Emacs - proof of concept</title>
      <link>https://ekaschalk.github.io/post/lig-spacing/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/lig-spacing/</guid>
      <description>
&lt;p&gt;
Ligatures are single-character replacements of strings. Examples of ligatures:
replacing &amp;#34;alpha&amp;#34; with the alpha symbol and &amp;#34;!=&amp;#34; with the a slashed equal sign.
See &amp;lt;a href=&amp;#39;/post/prettify-mode/&amp;#39;&amp;gt;Coding with Mathematical
Notation&amp;lt;/a&amp;gt; for details and pictures.
&lt;/p&gt;
&lt;p&gt;
There is a serious flaw with ligatures - either the indentation you see with
ligatures or without ligatures is correct, not both. So if someone that does not
use ligatures works on your code, your indentation&amp;#39;s will not match. An example:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; True indentation, what you want others to see&lt;/span&gt;
(alpha b
       c)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Emacs indentation, what you want to see when working&lt;/span&gt;
(a b
   c)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This problem significantly hampers ligature adoption.
&lt;/p&gt;
&lt;p&gt;
I do not believe any editor implements a solution to ligatures such that you see
the indentation you want to see, while the true indentation remains correct.
&lt;/p&gt;
&lt;p&gt;
I present a proof-of-concept solution to ligature spacing,
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
How Emacs displays text
&lt;/h1&gt;
&lt;p&gt;
Emacs associates &lt;code&gt;text-properties&lt;/code&gt; with strings. A property can be anything.
Some property names are special and tell Emacs to handle the text in a
particular way, like &lt;code&gt;face&lt;/code&gt; for how a text is highlighted.
&lt;/p&gt;
&lt;p&gt;
An &lt;code&gt;overlay&lt;/code&gt; has associated text-properties but is buffer-local. So when we move
that text to another buffer, if that overlay had a face, then that face would
not be carried over.
&lt;/p&gt;
&lt;p&gt;
Properties to be aware of:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;display&lt;/code&gt; : How Emacs displays that region, can be any string.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;invisible&lt;/code&gt; : Whether the text should be displayed.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;modification-hooks&lt;/code&gt; : When text in the overlay is edited, run these hooks.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;code&gt;evaporate&lt;/code&gt; (overlays) : Once the overlay is &amp;#34;done-with&amp;#34;, delete the overlay.
&lt;/p&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Compose region
&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Additionally, &lt;code&gt;compose-region&lt;/code&gt; is similar to &lt;code&gt;display&lt;/code&gt; in that the composed region
is displayed as (possibly many) characters. Current implementations of ligatures
all leverage compose-region by searching the buffer for say alpha and composing
from alphas beginning to end point the Unicode symbol for alpha.
&lt;/p&gt;
&lt;p&gt;
There are several important distinctions between &lt;code&gt;compose-region&lt;/code&gt; and &lt;code&gt;put-text-property &amp;#39;display&lt;/code&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Indentation uses the composed character for indenting while the text-property
display indents with the true, original string.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Composition cannot be set for overlays. The internal &lt;code&gt;composition&lt;/code&gt; text property,
unlike all other properties, cannot be put manually.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Editing within a composed region will undo the composition while one must
delete the whole region with the display property to undo the display.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;headline-3&#34;&gt;
Working through a solution
&lt;/h1&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
To compose or display the ligature?
&lt;/h2&gt;
&lt;p&gt;
Because composition adjusts the underlying indentation, it cannot be used for a
ligature spacing solution. Indentation cannot be adjusted in a major-mode
agnostic manner. Indentation always considers the true number of characters
preceding the text on the line, so dynamically adding invisible spaces will not
work.
&lt;/p&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
But how to make editing a display behave like a composition?
&lt;/h2&gt;
&lt;p&gt;
It is a serious issue to have to delete the whole text for the ligature to
disappear.
&lt;/p&gt;
&lt;p&gt;
The solution is the &lt;code&gt;modification-hooks&lt;/code&gt; text-property.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun lig-mod-hook (overlay post-mod? start end &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; _)
  (when post-mod?
    (overlay-put overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
    (overlay-put overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modification-hooks&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))  &lt;span style=&#34;color:#75715e&#34;&gt;; force evaporation&lt;/span&gt;

(overlay-put lig-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modification-hooks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(lig-mod-hook))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now editing text with the display property will behave as desired.
&lt;/p&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
So how to visually collapse the indentation?
&lt;/h2&gt;
&lt;p&gt;
We could set &lt;code&gt;invisible&lt;/code&gt; on the first 5 spaces of the line to collapse the
visual indentation by 5. But the invisible property will modify subsequent
line&amp;#39;s indentation by 5 fewer (if necessary), an issue that cannot be resolved
as we cannot determine in general the &amp;#34;if necessary&amp;#34; part.
&lt;/p&gt;
&lt;p&gt;
The trick is to make the 5 first spaces display as one space. Because display
doesn&amp;#39;t modify indentation, subsequent lines will be indented properly.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(overlay-put space-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-7&#34;&gt;
How do we determine the indentation we want to see then?
&lt;/h2&gt;
&lt;p&gt;
We let Emacs do the work - we create a mirror buffer where the ligatures are
actually composed and compare the differences in indentation.
&lt;/p&gt;
&lt;p&gt;
Overlays are not just buffer-local, they also do not transfer to indirect
buffers. Ideally we would have a hidden indirect buffer where we keep ligatures
composed instead. Unfortunately, since the &lt;code&gt;composition&lt;/code&gt; text property is
special, it can only be set with &lt;code&gt;compose-region&lt;/code&gt; which does not work for
overlays.
&lt;/p&gt;
&lt;p&gt;
Further, calculating indentation always adjusts the indentation. The
significance is that whenever we indent the indirect buffer, all the text will
move back-and-forth. So indirect buffers are out.
&lt;/p&gt;
&lt;p&gt;
Instead we create temporary buffers for the composition and retrieve an alist of
lines and their composed indentations.
&lt;/p&gt;
&lt;h1 id=&#34;headline-8&#34;&gt;
A working example
&lt;/h1&gt;
&lt;p&gt;
The current ligature snippets floating around hack &lt;code&gt;font-locks&lt;/code&gt; to perform the
ligature substitutions. I recently became familiar with context-sensitive syntax
highlighting via the &lt;code&gt;syntax-propertize-function&lt;/code&gt; in my work on &lt;code&gt;hy-mode&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I develop a minimal major-mode &lt;code&gt;lig-mode&lt;/code&gt; that uses the syntax function to
implement ligatures.
&lt;/p&gt;
&lt;h2 id=&#34;headline-9&#34;&gt;
Setup
&lt;/h2&gt;
&lt;p&gt;
First we setup a basic major-mode for testing.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lig-mode&lt;/span&gt;)

(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\.lig\\&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; lig-mode))

(define-derived-mode lig-mode fundamental-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lig&amp;#34;&lt;/span&gt;
  (setq-local indent-line-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lisp-indent-line&lt;/span&gt;)
  (setq-local syntax-propertize-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lig-syntax-propertize-function&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This is a proof-of-concept - we implement spacing for a single ligature for now.
Lets replace &amp;#34;hello&amp;#34; with a smiley face.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun lig--match-lig (limit)
  (re-search-forward (rx word-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; word-end) limit &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; lig-char &lt;span style=&#34;color:#ae81ff&#34;&gt;#x263a&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; lig-str &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;☺&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
Determining the indents we want to see
&lt;/h2&gt;
&lt;p&gt;
We copy the buffer contents to a temporary buffer, search and compose the
symbols, indent the buffer, and copy the indentation for each line.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defvar lig-diff-indents &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)

(defun lig-get-diff-indents ()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; lig-diff-indents &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
  (save-excursion
    &lt;span style=&#34;color:#75715e&#34;&gt;;; Compose the ligatures&lt;/span&gt;
    (goto-char (point-min))
    (while (re-search-forward (rx word-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; word-end) &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      (compose-region (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) lig-char))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; Change indent to match the composed symbol&lt;/span&gt;
    (indent-region (point-min) (point-max))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; Build an alist of line and indention column&lt;/span&gt;
    (goto-char (point-min))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    (while (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; (point) (point-max))
      (push (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; line (current-indentation))
            lig-diff-indents)
      (forward-line)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; line (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; line)))))

(defun run-lig-get-diff-indents ()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((true-buffer (current-buffer)))
    (with-temp-buffer
      (fundamental-mode)
      (setq-local indent-line-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lisp-indent-line&lt;/span&gt;)
      (insert-buffer-substring-no-properties true-buffer)
      (lig-get-diff-indents))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-11&#34;&gt;
Bringing it together
&lt;/h2&gt;
&lt;p&gt;
For details on how &lt;code&gt;syntax-propertize-function&lt;/code&gt; works, &amp;lt;a href=&amp;#39;/post/major-mode-part-1/&amp;#39;&amp;gt;check this post&amp;lt;/a&amp;gt;.
&lt;/p&gt;
&lt;p&gt;
Whenever we edit the buffer this hook will run, recalculating and visually
collapsing all the leading spaces as needed.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun lig-syntax-propertize-function (start-limit end-limit)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Make sure visual indentations are current&lt;/span&gt;
  (run-lig-get-diff-indents)

  (save-excursion
    (goto-char (point-min))

    (while (lig--match-lig end-limit)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((start (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
            (end (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
        (unless (-contains? (overlays-at start) lig-overlay)
          &lt;span style=&#34;color:#75715e&#34;&gt;;; Create and set the lig overlays if not already set&lt;/span&gt;
          (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; lig-overlay (make-overlay start end))
          (overlay-put lig-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; lig-str)
          (overlay-put lig-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evaporate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
          (overlay-put lig-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modification-hooks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(lig-mod-hook)))))

    &lt;span style=&#34;color:#75715e&#34;&gt;;; Remove all spacing overlays from buffer&lt;/span&gt;
    (remove-overlays &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;invis-spaces&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;;; Recalcualte and add all spacing overlays&lt;/span&gt;
    (goto-char (point-min))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    (while (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; (point) (point-max))
      &lt;span style=&#34;color:#75715e&#34;&gt;;; Don&amp;#39;t add the spacing overlay until we indent&lt;/span&gt;
      (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; (current-indentation) (point))
                 (point-max))
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((vis-indent (alist-get line lig-diff-indents))
               (num-spaces (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; (current-indentation) vis-indent))
               (start (point))
               (end (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; num-spaces (point))))

         &lt;span style=&#34;color:#75715e&#34;&gt;;; only add invisible spaces if the indentations differ&lt;/span&gt;
         (unless (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;=&lt;/span&gt; num-spaces &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; space-overlay (make-overlay start end))
            (overlay-put space-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;invis-spaces&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
            (overlay-put space-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
            (overlay-put space-overlay &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evaporate&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

         (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; line (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; line))
         (forward-line))))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;headline-12&#34;&gt;
The result
&lt;/h1&gt;
&lt;p&gt;
Enable &lt;code&gt;lig-mode&lt;/code&gt; to see:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; The true text&lt;/span&gt;
(hello how
       are
       you (hello hi
                  again))

&lt;span style=&#34;color:#75715e&#34;&gt;;; What we see&lt;/span&gt;
(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;☺&lt;/span&gt; how
   are
   you (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;☺&lt;/span&gt; hi
         again))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The indentation we see is not the true indentation anymore!
&lt;/p&gt;
&lt;p&gt;
The full and current code is &lt;a href=&#34;https://github.com/ekaschalk/emacs-ligatures&#34;&gt;hosted here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
The missing space on the second hello is a bug. There are many issues with this
implementation - this is a proof of concept. I suspect a completely correct
solution to be still some time and effort away, if only because this approach is
incredibly inefficient.
&lt;/p&gt;
&lt;p&gt;
This post shows that we maybe can have our cake and eat it too in regards to
ligatures.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep diving into a major mode - Part 1</title>
      <link>https://ekaschalk.github.io/post/major-mode-part-1/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/major-mode-part-1/</guid>
      <description>
&lt;p&gt;
I&amp;#39;ve taken up maintaining &lt;a href=&#34;https://github.com/hylang/hy-mode&#34;&gt;hy-mode&lt;/a&gt; - a major mode for &lt;a href=&#34;https://github.com/hylang/hy&#34;&gt;lispy python&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I narrate working through specific problems in auto-completion, indentation,
shell integration, and so on.
&lt;/p&gt;
&lt;p&gt;
This post touches on: syntax, indentation, font-locking, and context-sensitive
syntax.
&lt;/p&gt;
&lt;p&gt;
All code snippets require the Emacs packages &lt;code&gt;dash&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt;.
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Syntax Tables
&lt;/h1&gt;
&lt;p&gt;
The first step in a major mode is the syntax table.
&lt;/p&gt;
&lt;p&gt;
In any major mode run &lt;code&gt;describe-syntax&lt;/code&gt; to see its syntax table. As we are
working with a lisp, we copy its syntax-table to start with.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy-mode-syntax-table
  (-let [table
         (copy-syntax-table lisp-mode-syntax-table)]
    &lt;span style=&#34;color:#75715e&#34;&gt;;; syntax modifications...&lt;/span&gt;
    table)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy modes syntax table.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The syntax table isn&amp;#39;t set explicitly, its name identifies and sets it for hy-mode.
&lt;/p&gt;
&lt;p&gt;
Configuration is performed with &lt;code&gt;modify-syntax-entry&lt;/code&gt;, its docstring provides
all the syntactic constructs we can pick from.
&lt;/p&gt;
&lt;p&gt;
A subset to be familiar with:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
( ) : &lt;code&gt;open/close parenthesis&lt;/code&gt;. These are for all bracket-like constructs such
as [ ] or { }. The first character should be the syntactic construct, namely
&amp;#34;(&amp;#34; or &amp;#34;)&amp;#34;, and the second character should be the closing delimiter.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(modify-syntax-entry ?\{ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(}&amp;#34;&lt;/span&gt; table)
(modify-syntax-entry ?\} &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;){&amp;#34;&lt;/span&gt; table)
(modify-syntax-entry ?\[ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(]&amp;#34;&lt;/span&gt; table)
(modify-syntax-entry ?\] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)[&amp;#34;&lt;/span&gt; table)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&amp;#39; : &lt;code&gt;prefix character&lt;/code&gt;. Prefixes a symbol/word.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Quote characters are prefixes&lt;/span&gt;
(modify-syntax-entry ?\~ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt; table)
(modify-syntax-entry ?\@ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt; table)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
_ and w : &lt;code&gt;symbol and word constituent&lt;/code&gt; respectively.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#34;,&amp;#34; is a symbol in Hy, namely the tuple constructor&lt;/span&gt;
(modify-syntax-entry ?\, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_ p&amp;#34;&lt;/span&gt; table)

&lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#34;|&amp;#34; is a symbol in hy, naming the or operator&lt;/span&gt;
(modify-syntax-entry ?\| &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_ p&amp;#34;&lt;/span&gt; table)

&lt;span style=&#34;color:#75715e&#34;&gt;;; &amp;#34;#&amp;#34; is a tag macro, we include # in the symbol&lt;/span&gt;
(modify-syntax-entry ?\# &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_ p&amp;#34;&lt;/span&gt; table)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;: &lt;code&gt;generic string fence&lt;/code&gt;. A more general string quote syntactic construct.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Used for delimiting multi-line strings like with triple quotes in Python. I go
into depth on this construct in the &amp;#34;context-sensitive syntax&amp;#34; section.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
Indentation
&lt;/h1&gt;
&lt;p&gt;
Look through &lt;code&gt;calculate-lisp-indent&lt;/code&gt;, the indentation workhorse of &lt;code&gt;lisp-mode&lt;/code&gt; derivatives,
and it is quickly seen that indentation is &lt;em&gt;hard&lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
Indentation is set with &lt;code&gt;indent-line-function&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
In the case of a lisp, we actually do:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(setq-local indent-line-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lisp-indent-line&lt;/span&gt;)
(setq-local lisp-indent-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hy-indent-function&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Where the real work is performed by &lt;code&gt;calculate-lisp-indent&lt;/code&gt; that makes calls
to &lt;code&gt;lisp-indent-function&lt;/code&gt;, accepting an &lt;code&gt;indent-point&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The function at heart is &lt;code&gt;parse-partial-sexp&lt;/code&gt;, taking limiting points and
retrieving a 10 element list describing the syntax at the point.
&lt;/p&gt;
&lt;p&gt;
As this is a (necessarily) excessive amount of information, I recommend as
many other modes have done - define some aliases. I have:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--sexp-inermost-char (state) (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; state))
(defun hy--start-of-last-sexp (state) (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; state))
(defun hy--in-string? (state) (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; state))
(defun hy--start-of-string (state) (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; state))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Observe you can also omit &lt;code&gt;state&lt;/code&gt; and call &lt;code&gt;syntax-ppss&lt;/code&gt; to get state which runs
&lt;code&gt;parse-partial-sexp&lt;/code&gt; from point-min to current point, with the caveat that the
2nd and 6th state aren&amp;#39;t reliable. I prefer to pass the state manually.
&lt;/p&gt;
&lt;p&gt;
These are the building blocks for indentation - we can then write utilities
to better get our head around indentation like:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--prior-sexp? (state)
  (number-or-marker-p (hy--start-of-last-sexp state)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
The indent function
&lt;/h2&gt;
&lt;p&gt;
The three cases:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Normal Indent&lt;/span&gt;
(normal b
        c)
(normal
  b c)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Special Forms&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;special&lt;/span&gt; b
  c)

&lt;span style=&#34;color:#75715e&#34;&gt;;; List-likes&lt;/span&gt;
[a b
 c]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Hy&amp;#39;s current indent function:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy-indent-function (indent-point state)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Indent at INDENT-POINT where STATE is `parse-partial-sexp&amp;#39; for INDENT-POINT.&amp;#34;&lt;/span&gt;
  (goto-char (hy--sexp-inermost-char state))

  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hy--not-function-form-p)
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (current-column))  &lt;span style=&#34;color:#75715e&#34;&gt;; Indent after [, {, ... is always 1&lt;/span&gt;
    (forward-char &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;; Move to start of sexp&lt;/span&gt;

    (cond ((hy--check-non-symbol-sexp (point))  &lt;span style=&#34;color:#75715e&#34;&gt;; Comma tuple constructor&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (current-column)))

          ((hy--find-indent-spec state)  &lt;span style=&#34;color:#75715e&#34;&gt;; Special form uses fixed indendation&lt;/span&gt;
           (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (current-column)))

          (&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
           (hy--normal-indent calculate-lisp-indent-last-sexp)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
When we indent we jump to the sexp&amp;#39;s innermost char, ie. &amp;#34;(&amp;#34;, &amp;#34;[&amp;#34;, &amp;#34;{&amp;#34;, etc..
&lt;/p&gt;
&lt;p&gt;
If that character is a list-like, then we 1+ it and are done.
&lt;/p&gt;
&lt;p&gt;
Otherwise we move to the start of the sexp and investigate if
&lt;code&gt;(thing-at-point &amp;#39;symbol)&lt;/code&gt;. If it is, then we check a list of special forms
like &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;defn&lt;/code&gt; for a match. If we found a (possibly fuzzy) match,
then regardless of whether the first line contains args or not, we indent
the same.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--normal-indent (last-sexp)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Determine normal indentation column of LAST-SEXP.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Example:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; (a (b c d
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       e
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;       f))
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1. Indent e =&amp;gt; start at d -&amp;gt; c -&amp;gt; b.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Then backwards-sexp will throw error trying to jump to a.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Observe &amp;#39;a&amp;#39; need not be on the same line as the ( will cause a match.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Then we determine indentation based on whether there is an arg or not.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2. Indenting f will go to e.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Now since there is a prior sexp d but we have no sexps-before on same line,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;the loop will terminate without error and the prior lines indentation is it.&amp;#34;&lt;/span&gt;
  (goto-char last-sexp)
  (-let [last-sexp-start nil]
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ignore-errors
          (while (hy--anything-before? (point))
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; last-sexp-start (prog1
                                      &lt;span style=&#34;color:#75715e&#34;&gt;;; Indentation should ignore quote chars&lt;/span&gt;
                                      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (-contains? &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(?\&amp;#39; ?\` ?\~)
                                                      (char-before))
                                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1-&lt;/span&gt; (point))
                                        (point))
                                    (backward-sexp))))
          &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
        (current-column)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (hy--anything-after? last-sexp-start))
          (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (current-column))
        (goto-char last-sexp-start)  &lt;span style=&#34;color:#75715e&#34;&gt;; Align with function argument&lt;/span&gt;
        (current-column)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Normal indent does the most work. To notice, if we are on the next line
without a function arg above, then &lt;code&gt;last-sexp-start&lt;/code&gt; will be nil as
&lt;code&gt;backward-sexp&lt;/code&gt; will throw an error and the &lt;code&gt;setq&lt;/code&gt; won&amp;#39;t go off.
&lt;/p&gt;
&lt;p&gt;
If there is a function call above, then the &lt;code&gt;current-column&lt;/code&gt; of the
innermost, non-opening sexp, will end up as the indent point.
&lt;/p&gt;
&lt;p&gt;
If we indent the line of the funcall, it will jump to the containing sexp
and calculate its indent.
&lt;/p&gt;
&lt;p&gt;
Other indentation functions are a bit more advanced in that they track the
number of prior sexps in the indent-function to distinguish between eg. the
then and else clause of an if statement. Those cases use the same
fundamentals that are seen here.
&lt;/p&gt;
&lt;p&gt;
Developing indentation from scratch can be challenging. The approach I took
was to look at clojure&amp;#39;s indentation and trim it down until it fit this
language. I&amp;#39;ve removed most of the extraneous details that it adds to handle
special rules for eg. &lt;code&gt;clojure.spec&lt;/code&gt; but it is still possible that I could
trim this further.
&lt;/p&gt;
&lt;h1 id=&#34;headline-4&#34;&gt;
Font Locks and Highlighting
&lt;/h1&gt;
&lt;p&gt;
Two symbols are the entry points to be aware of into font locking:
&lt;code&gt;hy-font-lock-kwds&lt;/code&gt; and &lt;code&gt;hy-font-lock-syntactic-face-function&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; font-lock-defaults
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(hy-font-lock-kwds
          &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
          ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+-*/.&amp;lt;&amp;gt;=!?$%_&amp;amp;~^:@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;; syntax alist&lt;/span&gt;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
          (font-lock-mark-block-function &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mark-defun)
          (font-lock-syntactic-face-function  &lt;span style=&#34;color:#75715e&#34;&gt;; Differentiates (doc)strings&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; hy-font-lock-syntactic-face-function)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Font lock keywords
&lt;/h2&gt;
&lt;p&gt;
There exists many posts on modifying the variable &lt;code&gt;font-lock-keywords&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
The approach taken in &lt;code&gt;hy-mode&lt;/code&gt; is to separate out the language by category:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy--kwds-constants
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ellipsis&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotImplemented&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy constant keywords.&amp;#34;&lt;/span&gt;)

(defconst hy--kwds-defs
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defun&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defmacro&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defmacro/g!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defmacro!&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defreader&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defsharp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deftag&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy definition keywords.&amp;#34;&lt;/span&gt;)

(defconst hy--kwds-operators
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;&amp;lt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;&amp;lt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt;=&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy operator keywords.&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; and so on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And then use the amazing &lt;code&gt;rx&lt;/code&gt; macro for constructing the regexes.
&lt;/p&gt;
&lt;p&gt;
Now due to &lt;code&gt;rx&lt;/code&gt; being a macro and its internals, in order to use variable
definitions in the regex construction we have to call &lt;code&gt;rx-to-string&lt;/code&gt; instead.
&lt;/p&gt;
&lt;p&gt;
The simplest definition:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy--font-lock-kwds-constants
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
   (rx-to-string
    &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; (or &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;hy--kwds-constants)))

   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; font-lock-constant-face))

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy constant keywords.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
A more complex example with multiple groups taking different faces:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy--font-lock-kwds-defs
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
   (rx-to-string
    &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; (group-n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (or &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;hy--kwds-defs))
        (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; space)
        (group-n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; word))))

   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; font-lock-keyword-face)
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; font-lock-function-name-face &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy definition keywords.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Of course not all highlighting constructs are determined by symbol name. We
can highlight the shebang line for instance as:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy--font-lock-kwds-shebang
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
   (rx buffer-start &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#!&amp;#34;&lt;/span&gt; (0+ not-newline) eol)

   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; font-lock-comment-face))

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hy shebang line.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We then collect all our nice and modular font locks as &lt;code&gt;hy-font-lock-kwds&lt;/code&gt; that we set earlier:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defconst hy-font-lock-kwds
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; hy--font-lock-kwds-constants
        hy--font-lock-kwds-defs
        &lt;span style=&#34;color:#75715e&#34;&gt;;; lots more ...&lt;/span&gt;
        hy--font-lock-kwds-shebang)

  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;All Hy font lock keywords.&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Syntactic face function
&lt;/h2&gt;
&lt;p&gt;
This function is typically used for distinguishing between string,
docstrings, and comments. It does not need to be set unless you want to
distinguish docstrings.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--string-in-doc-position? (state)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Is STATE within a docstring?&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (hy--start-of-string state))  &lt;span style=&#34;color:#75715e&#34;&gt;; Identify module docstring&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    (-when-let* ((first-sexp (hy--sexp-inermost-char state))
                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; (save-excursion
                             (goto-char (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; first-sexp))
                             (thing-at-point &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&lt;/span&gt;))))
      (s-matches? (rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;def&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; blank)) &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;))))  &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#34;def&amp;#34;==&amp;#34;setv&amp;#34;&lt;/span&gt;

(defun hy-font-lock-syntactic-face-function (state)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return syntactic face function for the position represented by STATE.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;STATE is a `parse-partial-sexp&amp;#39; state, and the returned function is the
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Lisp font lock syntactic face function. String is shorthand for either
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a string or comment.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hy--in-string? state)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (hy--string-in-doc-position? state)
          font-lock-doc-face
        font-lock-string-face)
    font-lock-comment-face))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
It is rather straightforward - we start out within either a string or
comment. If needed, we jump to the first sexp and see if it is a &amp;#34;def-like&amp;#34;
symbol, in which case we know its a doc.
&lt;/p&gt;
&lt;p&gt;
This implementation isn&amp;#39;t perfect as any string with a parent def-sexp will
use the doc-face, so if your function returns a raw string, then it will be
highlighted as if its a doc.
&lt;/p&gt;
&lt;h1 id=&#34;headline-7&#34;&gt;
Context sensitive syntax
&lt;/h1&gt;
&lt;p&gt;
An advanced feature Emacs enables is context-sensitive syntax. Some examples
are multi-line python strings, where there must be three single quotes
together, or haskell&amp;#39;s multiline comments.
&lt;/p&gt;
&lt;p&gt;
Hy implements multiline string literals for automatically escaping quote
characters. The syntax is &lt;code&gt;#[optional-delim[the-string]optional-delim]&lt;/code&gt; where
the string can span lines.
&lt;/p&gt;
&lt;p&gt;
In order to identify and treat the bracket as a string, we look to setting the
&lt;code&gt;syntax-propertize-function&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
It takes two arguments, the start and end points with which to search through.
&lt;code&gt;syntax.el&lt;/code&gt; handles the internals of limiting and passing the start and end
and applying/removing the text properties as the construct changes.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun hy--match-bracket-string (limit)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Search forward for a bracket string literal.&amp;#34;&lt;/span&gt;
  (re-search-forward
   (rx &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#[&amp;#34;&lt;/span&gt;
       (0+ not-newline)
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;
       (group (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (any &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;))))
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;
       (0+ not-newline)
       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;)
   limit
   &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(defun hy-syntax-propertize-function (start end)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Implements context sensitive syntax.&amp;#34;&lt;/span&gt;
  (save-excursion
    (goto-char start)

    &lt;span style=&#34;color:#75715e&#34;&gt;;; Start goes to current line, need to go to char-before the #[ block&lt;/span&gt;
    (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;nth&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (syntax-ppss))
      (goto-char (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; (hy--sexp-inermost-char (syntax-ppss)) &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))

    (while (hy--match-bracket-string end)
      (put-text-property (&lt;span style=&#34;color:#a6e22e&#34;&gt;1-&lt;/span&gt; (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;syntax-table&lt;/span&gt; (string-to-syntax &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;))

      (put-text-property (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;1+&lt;/span&gt; (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
                         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;syntax-table&lt;/span&gt; (string-to-syntax &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We go to the start and jump before its innermost containing sexp begins minus
two for the hash sign and bracket characters.
&lt;/p&gt;
&lt;p&gt;
If the regex matches a bracket string, we then set the innermost brackets on
both sides to have the &lt;code&gt;string-fence&lt;/code&gt; syntax.
&lt;/p&gt;
&lt;p&gt;
When the syntax is set - &lt;code&gt;parse-partial-sexp&lt;/code&gt; and in particular font lock mode
and &lt;code&gt;indent-line&lt;/code&gt; will now recognize that block as a string - so proper
indentation and highlighting follow immediately. And when we modify the
brackets, the string-fence syntax is removed and behaves as expected.
&lt;/p&gt;
&lt;p&gt;
This function can handle any kind of difficult syntactic constructs. For
instance, I could modify it to only work if the delimiters on both side of the
bracket string are the same. I could also associate some arbitrary, custom
text property that other parts of hy-mode interact with.
&lt;/p&gt;
&lt;p&gt;
Note that there is the macro &lt;code&gt;syntax-propertize-rules&lt;/code&gt; for automating the
searching and &lt;code&gt;put-text-property&lt;/code&gt; portions. I prefer to do the searching and
application manually to 1. have more flexibility and 2. step through the trace
easier.
&lt;/p&gt;
&lt;h1 id=&#34;headline-8&#34;&gt;
Closing
&lt;/h1&gt;
&lt;p&gt;
Building a major mode teaches a lot about how Emacs works. I&amp;#39;m sure I&amp;#39;ve made
errors, but so far this has been enough to get &lt;code&gt;hy-mode&lt;/code&gt; up and running. The
difference in productivity in Hy I&amp;#39;ve enjoyed since taking maintainer-ship has
made the exercise more than worth it.
&lt;/p&gt;
&lt;p&gt;
I also have auto-completion and shell/process integration working which I&amp;#39;ll
touch on in future posts.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A mile Hy - My experience with lispy Python</title>
      <link>https://ekaschalk.github.io/post/mile-hy/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/mile-hy/</guid>
      <description>
&lt;p&gt;
Roughly, &lt;a href=&#34;http://docs.hylang.org/en/stable/&#34;&gt;Hy&lt;/a&gt; is to Python as Clojure is to Java. Hy completely inter-ops with Python.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve hit commit 1,500 in my Hy project at work. I wanted to share my experience
working with Hy, where I feel it shines and where it falls short.
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Intro to Hy
&lt;/h1&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Basic syntax
&lt;/h2&gt;
&lt;p&gt;
Hy is a lisp and so uses hyphens as its delimiter. Hy unmangles all hyphens as
underscores and mangles all incoming underscores to hyphens.
&lt;/p&gt;
&lt;p&gt;
The following is all valid, hyphens and underscores can be used interchangeably:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;import&lt;/span&gt; a-module)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;import&lt;/span&gt; b_module)

(defn a-func [x y]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; x y))

(setv a-list [1 2])
(setv a_dict {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v2&amp;#34;&lt;/span&gt;})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To use Hy from python:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hy
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; my_hy_module &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; a_func

a_func(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Classes work as expected:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defclass AClass [object]
  (defn --init-- [self])

  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;@(staticmethod
     (defn -a-func [])))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The &lt;code&gt;#@&lt;/code&gt; is a reader macro for &lt;code&gt;with-decorator&lt;/code&gt;, illustrated later.
&lt;/p&gt;
&lt;p&gt;
Most all python features are implemented. For example, in master branch we
have args/kwargs unpacking as:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#*&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ae81ff&#34;&gt;#*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sep&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Some features that were once in python but were removed are also implemented,
for instance parameter unpacking:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defn add [x [y z]]
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; x y z))

(add &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; [2 3])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Shadowed built-ins
&lt;/h2&gt;
&lt;p&gt;
Most operators are shadowed. This enables:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; [1 2] [2 3])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
whereas in python you would have to do a comprehension or:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; op

map(op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Special characters in names
&lt;/h2&gt;
&lt;p&gt;
Python restricts the characters you can use in setting variable and functions.
Hy does not have most of these restrictions.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defn assert~ [x y]
  (npt.assert-almost-equal x y))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Testing
&lt;/h2&gt;
&lt;p&gt;
Hy works with pytest. Add &lt;code&gt;project_root/conftest.py&lt;/code&gt; with:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hy
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; _pytest.python &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Module


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pytest_collect_file&lt;/span&gt;(path, parent):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ext &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.hy&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basename:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Module(path, parent)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
To collect and run tests written in hy.
&lt;/p&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Debugging
&lt;/h2&gt;
&lt;p&gt;
Pdb/ipdb integrate perfectly with Hy, regardless if called from a hy, python, or
ipython repl. The hy code can be stepped through and depending on if which repl
you are in, hy/python code be can executed.
&lt;/p&gt;
&lt;h1 id=&#34;headline-7&#34;&gt;
Why Hy
&lt;/h1&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Macros
&lt;/h2&gt;
&lt;p&gt;
Espousing macros to those who have not learned them is akin to the &amp;#34;monad
fallacy&amp;#34;. Instead, consider this example of macros reducing pytest boilerplate.
&lt;/p&gt;
&lt;p&gt;
The macro definitions are &lt;a href=&#34;https://gist.github.com/ekaschalk/240b213aabe83f565aa74bc70161bfaf&#34;&gt;contained in this gist&lt;/a&gt;.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(deffixture numbers
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some numbers.&amp;#34;&lt;/span&gt;
  [[[1 2] &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; [2 3] [2 3]
   [[1 2] &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; [3 4] [2 4]]

  (list-it it (np.array x1) x2 (np.array x3) (np.array x4))

(with-fixture numbers
  test-numpy-+ [x i y -]
  (assert~ (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; i x) y))

(with-fixture numbers
  test-numpy-* [x i &lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; y]
  (assert~ (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; i x) y))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@pytest.fixture&lt;/span&gt;(params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
    ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]),
    ([&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])
])
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;(request):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Some numbers.&amp;#34;&lt;/span&gt;
    x, i, y, z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;params
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(x), i, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(y), np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(z)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_numpy_add&lt;/span&gt;(numbers):
    x, i, y, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers
    npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_almost_equal(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i, y)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_numpy_mult&lt;/span&gt;(numbers):
    x, i, _, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numbers
    npt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assert_almost_equal(x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i, y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Macros allowed:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Implicitly binding request.params to &amp;#34;it&amp;#34; which are then deconstructed to an
anonymous function with the number of parameters as its arity.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Selectively transforming these parameters.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Unpacking and binding the parameters at function definition level.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
With the prep factored out in a way only macros enable, the testing body is now
exactly and only the testing logic.
&lt;/p&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
Reader Macros
&lt;/h3&gt;
&lt;p&gt;
Reader macros are macros with a shortened syntax.
The ones I use most are:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;import&lt;/span&gt; [toolz.curried &lt;span style=&#34;color:#e6db74&#34;&gt;:as&lt;/span&gt; tz])

(deftag &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; [expr]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cast form to a tuple.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(tuple ~expr))

(deftag $ [expr]
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Curry a form.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(tz.curry ~@expr))

&lt;span style=&#34;color:#75715e&#34;&gt;;; For example&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;$(&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) [1 2])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Or in python:
&lt;/p&gt;
&lt;div class=&#34;src src-python&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;tuple(map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))
tuple(x&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Depending on the version of hy you are using, it is either &lt;code class=&#34;verbatim&#34;&gt;defsharp&lt;/code&gt; or &lt;code class=&#34;verbatim&#34;&gt;deftag&lt;/code&gt;.
&lt;/p&gt;
&lt;h2 id=&#34;headline-10&#34;&gt;
Structural editing
&lt;/h2&gt;
&lt;p&gt;
Those that are familiar with lisps likely know the terms &amp;#34;slurp&amp;#34;, &amp;#34;barf&amp;#34;,
&amp;#34;wrap&amp;#34;, and so on.
&lt;/p&gt;
&lt;p&gt;
Lisp syntax allows for editing the AST directly.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Initial text&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; [1 2] (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;; wrap map with &amp;#34;w&amp;#34; followed by three slurps 3*&amp;#34;s&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; [1 2] (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;color:#75715e&#34;&gt;;; traverse to last form 2*&amp;#34;j&amp;#34; and transpose &amp;#34;t&amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) [1 2])
&lt;span style=&#34;color:#75715e&#34;&gt;;; altogether &amp;#39;wsssjjt&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This kind of editing is not possible (or at least very restricted) when editing
python code.
&lt;/p&gt;
&lt;h2 id=&#34;headline-11&#34;&gt;
Functional programming
&lt;/h2&gt;
&lt;p&gt;
What drove me to move to Hy was when I looked at my code and saw
&lt;code class=&#34;verbatim&#34;&gt;tz.thread_first&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;tz.thread_last&lt;/code&gt; everywhere. Python goes out of its way
to make functional programming a second-class citizen. Most all building blocks
of FP must be implemented and imported everywhere, like the identity function
and composition.
&lt;/p&gt;
&lt;p&gt;
Hy empowers FP with:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Threading and anaphoric macros.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
First class functools and itertools (reduce, starmap, compress…)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Common functional methods (juxt, take, drop, constantly, repeatedly…)
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;headline-12&#34;&gt;
When to Hyde
&lt;/h1&gt;
&lt;p&gt;
Hy is not always the best choice. I have encountered some issues with Hy, as
would be expected with a niche language under active development.
&lt;/p&gt;
&lt;p&gt;
The issues are however minor and due to the key development invariant of
maintaining complete python compatibility, at worst they can be addressed by
writing that functionality in Python and importing it.
&lt;/p&gt;
&lt;h2 id=&#34;headline-13&#34;&gt;
Tooling
&lt;/h2&gt;
&lt;p&gt;
The largest challenge I see to Hy adoption is its current state of tooling.
&lt;/p&gt;
&lt;p&gt;
If you want to have an enjoyable Hy experience, you are pretty much limited to
Emacs.
&lt;/p&gt;
&lt;p&gt;
The Emacs major-mode hy-mode implements syntax highlighting and some basic repl
support but has its own set of issues.
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
No linter, and pylint won&amp;#39;t recognize imported hy objects.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
No autocompletion.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
There are bugs.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
I&amp;#39;m going to work to address some of these issues but as of now, while you have
access to all of python&amp;#39;s libraries, the same is not true for its tooling.
&lt;/p&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
Scripting
&lt;/h2&gt;
&lt;p&gt;
Hy&amp;#39;s repl comes far short of Ipython&amp;#39;s featureset. You do not have things like
autoloading or %pdb toggling. In general, lisp&amp;#39;s syntax is not as nice for
scripting.
&lt;/p&gt;
&lt;p&gt;
I actually write all my scripts and interactive code in Python as a result.
&lt;/p&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
Performance Critical Code
&lt;/h2&gt;
&lt;p&gt;
If you are writing code that does a lot of fancy array indexing and in-place
operations, you will have a bad time in Hy.
&lt;/p&gt;
&lt;p&gt;
My work is data-sciency and I have some numba accelerated code in separate
python modules. I&amp;#39;ve called Cython source files from Hy without issue.
&lt;/p&gt;
&lt;p&gt;
There is also a small performance cost to using Hy, it is insignificant for
most purposes.
&lt;/p&gt;
&lt;h2 id=&#34;headline-16&#34;&gt;
Breaking Changes
&lt;/h2&gt;
&lt;p&gt;
Breaking changes do occur.
&lt;/p&gt;
&lt;p&gt;
Version 0.12 had reader macros as &lt;code class=&#34;verbatim&#34;&gt;defreader&lt;/code&gt; which is now &lt;code class=&#34;verbatim&#34;&gt;defsharp&lt;/code&gt; in 0.13
and now in master branch is &lt;code class=&#34;verbatim&#34;&gt;deftag&lt;/code&gt;. There are good reasons for these changes,
but they do require being up to date on hy&amp;#39;s development.
&lt;/p&gt;
&lt;p&gt;
The function &lt;code class=&#34;verbatim&#34;&gt;apply&lt;/code&gt; for calling a function with arguments unpacked was removed
in master when the unpacking generalizations were implemented. However, apply
still has a use-case for threading macros and last I checked they were debating
reintroducing it in some form.
&lt;/p&gt;
&lt;p&gt;
The constants for inf and -inf recently were changed to require capitalization.
&lt;/p&gt;
&lt;p&gt;
Let was originally implemented but removed in favor of &lt;code class=&#34;verbatim&#34;&gt;setv&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
There are good reasons for all these changes but they do incur extra maintenance
on your part.
&lt;/p&gt;
&lt;h2 id=&#34;headline-17&#34;&gt;
Documentation
&lt;/h2&gt;
&lt;p&gt;
Hy&amp;#39;s documentation could be improved. Some examples:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Integrating pytest and Hy via the &lt;code class=&#34;verbatim&#34;&gt;conftest.py&lt;/code&gt; is not documented.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Which operators are shadowed are not documented. While now functions like &lt;code class=&#34;verbatim&#34;&gt;get&lt;/code&gt; are shadowed, when I started, using &lt;code class=&#34;verbatim&#34;&gt;get&lt;/code&gt; as a function would throw the strange &lt;code class=&#34;verbatim&#34;&gt;NameError: name &amp;#39;get&amp;#39; is not defined&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Macros are imported with &lt;code class=&#34;verbatim&#34;&gt;require&lt;/code&gt;. Unlike imports, requires are not transitive. So if I have a &lt;code class=&#34;verbatim&#34;&gt;macros.hy&lt;/code&gt; file that does &lt;code class=&#34;verbatim&#34;&gt;(require [hy.extra.anaphoric [*]])&lt;/code&gt;, in every file requiring from macros I will also need to require the anaphorics again.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
The documentation for &lt;code class=&#34;verbatim&#34;&gt;zero?&lt;/code&gt; implies an &lt;code class=&#34;verbatim&#34;&gt;x is 0&lt;/code&gt; but it actually checks
equality. This came up working with numpy, small issues like this are present.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Although the community is small, I&amp;#39;ve found the maintainers to be very helpful
and quick to respond.
&lt;/p&gt;
&lt;h1 id=&#34;headline-18&#34;&gt;
My Experience
&lt;/h1&gt;
&lt;p&gt;
Python is a practical language - it has amazing libraries, tooling, and
communities. But it&amp;#39;s development is opinionated towards imperative programming
and its syntax, while great for the majority, leaves others wanting more
flexibility.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve really enjoyed my time with Hy and 1,500 commits later, am satisfied with
my choice. Small changes like parameter unpacking and no more commas trim things
down. Larger changes like macros, threading and the functional built-ins allow
for a first-class functional programming experience.
&lt;/p&gt;
&lt;p&gt;
Choosing Hy you don&amp;#39;t get Clojurescript or the type safety of Haskell, but you
do get Numpy, Pandas, Matplotlib, Numba, Django, and every other python library
from the comfort of Lisp.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to Spacemacs Layers</title>
      <link>https://ekaschalk.github.io/post/migrate-layers/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/migrate-layers/</guid>
      <description>
&lt;p&gt;
Spacemacs is referred for its evil integration, space-based bindings, and
community contributed &lt;em&gt;layers&lt;/em&gt; that collect, configure, and integrate groups of
packages.
&lt;/p&gt;
&lt;p&gt;
For how much they add to Emacs, motivations for personal layers are largely
undocumented.
&lt;/p&gt;
&lt;p&gt;
I introduce layers then discuss benefits, approaches, and gotchas with
layer-based configurations.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve migrated my entire &lt;code&gt;dotspacemacs/user-config&lt;/code&gt; into personal layers - now 6
lines vs 1,500.
&lt;/p&gt;
&lt;p&gt;
See &lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d&#34;&gt;https://github.com/ekaschalk/.spacemacs.d&lt;/a&gt; for my viewer-friendly configuration .
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Introducing Layers
&lt;/h1&gt;
&lt;p&gt;
This section is not a replacement for &lt;a href=&#34;http://spacemacs.org/doc/LAYERS.html&#34;&gt;http://spacemacs.org/doc/LAYERS.html&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Layers are directories containing up to 5 files and possibly additional
packages.
&lt;/p&gt;
&lt;p&gt;
In load order:
&lt;/p&gt;
&lt;h3 id=&#34;headline-2&#34;&gt;
Layers.el
&lt;/h3&gt;
&lt;p&gt;
Layer dependencies to load first.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(configuration-layer/declare-layers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(theming))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
packages.el
&lt;/h3&gt;
&lt;p&gt;
Packages added or configured by the layer.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; my-layer-packages
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(a-pkg
        (github-pkg &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; (recipe &lt;span style=&#34;color:#e6db74&#34;&gt;:fetcher&lt;/span&gt; github
                                      &lt;span style=&#34;color:#e6db74&#34;&gt;:repo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github-user/repo-name&amp;#34;&lt;/span&gt;))
        (my-pkg &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; local)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Owned Packages:&lt;/strong&gt; A layer owns a package if it defines &lt;code&gt;layer-name/init-pkg-name&lt;/code&gt;. All packages not defined in &lt;code&gt;dotspacemacs/additional/packages&lt;/code&gt; should have one and only one owner. It calls &lt;code&gt;use-package&lt;/code&gt;. Common options are &lt;code&gt;:init&lt;/code&gt; for before load config, &lt;code&gt;:config&lt;/code&gt; for after, &lt;code&gt;:if&lt;/code&gt; for loading if eg. a certain OS or executable is installed, &lt;code&gt;:after&lt;/code&gt; for enforcing load order, and &lt;code&gt;:defer t&lt;/code&gt; for deferred loading.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun display/init-pretty-outlines ()
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; pretty-outlines
    &lt;span style=&#34;color:#e6db74&#34;&gt;:after&lt;/span&gt; outshine
    &lt;span style=&#34;color:#e6db74&#34;&gt;:config&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt;
      (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outline-set-display-table&lt;/span&gt;)
      (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-minor-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outline-set-display-table&lt;/span&gt;)
      (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emacs-lisp-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outline-add-bullets&lt;/span&gt;))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Unowned Packages:&lt;/strong&gt; A layer that does not own a package can configure it with &lt;code&gt;layer-name/pre-init-pkg-name&lt;/code&gt; and &lt;code&gt;layer-name/post-init-pkg-name&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun config/pre-init-neotree ()
  (evil-global-set-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&lt;/span&gt; (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-p&amp;#34;&lt;/span&gt;)
                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neotree-find-project-root&lt;/span&gt;))

(defun config/post-init-neotree ()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; neo-theme &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;icons&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;strong&gt;Local Packages:&lt;/strong&gt; Personal packages at &lt;code&gt;local/my-pkg/my-pkg.el&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
funcs.el
&lt;/h3&gt;
&lt;p&gt;
Layer functions.
&lt;/p&gt;
&lt;p&gt;
Package agnostic functions belong here.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defmacro with-face (STR &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; PROPS)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return STR propertized with PROPS.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(propertize &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;STR &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;face&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;PROPS)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Guarding against particular packages being installed:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(when (configuration-layer/package-usedp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;some-pkg&lt;/span&gt;)
  (defun my-func ()))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
config.el
&lt;/h3&gt;
&lt;p&gt;
Layer variables.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; python/config.el&lt;/span&gt;
(defvar python-tab-width &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tab width value for python buffers&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; init.el in dotspacemacs-configuration-layers&lt;/span&gt;
(python &lt;span style=&#34;color:#e6db74&#34;&gt;:variables&lt;/span&gt; python-tab-width &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Configuration defined here will be loaded before the package init functions are
executed. Layer dependencies are actually loaded prior to config.el.
&lt;/p&gt;
&lt;p&gt;
This can be used for eg. setting theme updates with the &lt;code&gt;theming&lt;/code&gt; layer.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; theming-modifications
      &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;((solarized-dark (avy-background-face &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#586e75&amp;#34;&lt;/span&gt;)
                        (font-lock-doc-face &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#2aa198&amp;#34;&lt;/span&gt;))
        (solarized-light &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
keybindings.el
&lt;/h3&gt;
&lt;p&gt;
Package-agnostic key-bindings.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spacemacs/delete-window&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Evil will be loaded&lt;/span&gt;
(evil-define-key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(normal visual motion) outline-minor-mode-map
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-up-heading&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;headline-7&#34;&gt;
Personal Layers
&lt;/h1&gt;
&lt;h2 id=&#34;headline-8&#34;&gt;
Structure
&lt;/h2&gt;
&lt;p&gt;
While any organization can be used, I recommend at most these 5 layers covering
common needs.
&lt;/p&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
A Macros/Base Layer
&lt;/h3&gt;
&lt;p&gt;
A base layer that all personal layers inherit packages, macros, and common
functions from with &lt;code&gt;(configuration-layer/declare-layers &amp;#39;(base))&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I load &lt;code&gt;dash-functional&lt;/code&gt; and define &lt;code&gt;with-dir&lt;/code&gt;, &lt;code&gt;with-face&lt;/code&gt;, and other useful
utilities here.
&lt;/p&gt;
&lt;h3 id=&#34;headline-10&#34;&gt;
Config
&lt;/h3&gt;
&lt;p&gt;
All packages and their configuration and key-bindings that don&amp;#39;t fit into any
neat grouping.
&lt;/p&gt;
&lt;p&gt;
When any package&amp;#39;s init gets large, consider a local package. I maintain my
org-mode setup separately in a local &lt;code&gt;org-config&lt;/code&gt; package.
&lt;/p&gt;
&lt;p&gt;
Anything, excluding spacemacs toggles, can be setup here. For instance:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; config-packages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(evil &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;))

(defun config/post-init-evil ()
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; evil-escape-key-sequence &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jk&amp;#34;&lt;/span&gt;)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; evil-escape-unordered-key-sequence &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;)
  (advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-ex-search-next&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config/scroll-to-center-advice&lt;/span&gt;)
  (advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-ex-search-previous&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config/scroll-to-center-advice&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I recommend this layer own &lt;strong&gt;all additional packages&lt;/strong&gt; except themes, see gotchas.
&lt;/p&gt;
&lt;h3 id=&#34;headline-11&#34;&gt;
Display
&lt;/h3&gt;
&lt;p&gt;
Theme updates and display packages like &lt;code&gt;spaceline-all-the-icons&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Due to how Spacemacs loads themes, I highly recommend declaring the
&lt;code&gt;theming&lt;/code&gt; layer a dependency for theme updates. It is much more efficient should
you configure multiple themes, like light and dark versions, and as it is a
layer, it will be loaded prior to &lt;code&gt;config.el&lt;/code&gt; for proper code isolation.
&lt;/p&gt;
&lt;p&gt;
I integrate and configure my local pretty packages here:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;em&gt;pretty-code&lt;/em&gt; : Program with custom ligatures and symbols, see &amp;lt;a href=&amp;#39;/post/prettify-mode/&amp;#39;&amp;gt;mathematical notation in emacs&amp;lt;/a&amp;gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;em&gt;pretty-eshell&lt;/em&gt; : Customize eshell information and faces, see &amp;lt;a href=&amp;#39;/post/custom-eshell/&amp;#39;&amp;gt;making eshell your own&amp;lt;/a&amp;gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;em&gt;pretty-fonts&lt;/em&gt; : All the icons and Fira Code ligature integration.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;em&gt;pretty-magit&lt;/em&gt; : Commit leaders, see &amp;lt;a href=&amp;#39;/post/pretty-magit/&amp;#39;&amp;gt;pretty magit - integrating commit leaders&amp;lt;/a&amp;gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;em&gt;pretty-outlines&lt;/em&gt; : Fancy outline bullets and ellipsis, see &amp;lt;a href=&amp;#39;/post/outline-bullets/&amp;#39;&amp;gt;fancy outline bullets&amp;lt;/a&amp;gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;headline-12&#34;&gt;
Langs (optional)
&lt;/h3&gt;
&lt;p&gt;
I find it useful to separate programming language configuration out from the
config layer, though it is not necessary.
&lt;/p&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
Personal (optional)
&lt;/h3&gt;
&lt;p&gt;
All personal packages that aren&amp;#39;t display related I maintain in a single
personal layer. This is only relevant if you write your own packages.
&lt;/p&gt;
&lt;p&gt;
I setup my blogging and outline-jump packages here.
&lt;/p&gt;
&lt;h2 id=&#34;headline-14&#34;&gt;
Your init.el
&lt;/h2&gt;
&lt;p&gt;
Layers must be declared in your &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; to take effect.
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;ve organized my layers into several sections:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defvar dotspacemacs/layers/local
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((macros &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; local)
    (config &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; local)
    (display &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; local)
    (langs &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; local)
    (personal &lt;span style=&#34;color:#e6db74&#34;&gt;:location&lt;/span&gt; local))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local layers housed in &amp;#39;~/.spacemacs.d/layers&amp;#39;.&amp;#34;&lt;/span&gt;)

(defvar dotspacemacs/layers/core
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(better-defaults
    git
    org
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Layers I consider core to Spacemacs&amp;#34;&lt;/span&gt;)

(defvar dotspacemacs/layers/langs
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(emacs-lisp
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Programming and markup language layers&amp;#34;&lt;/span&gt;)

(defvar dotspacemacs/layers/extra
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(gnus
    graphviz
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Miscellaneous layers&amp;#34;&lt;/span&gt;)

(defun dotspacemacs/layers ()
  (setq-default dotspacemacs-configuration-layer-path &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.spacemacs.d/layers/&amp;#34;&lt;/span&gt;)
                dotspacemacs-configuration-layers
                (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; dotspacemacs/layers/core
                        dotspacemacs/layers/langs
                        dotspacemacs/layers/extra
                        dotspacemacs/layers/local)
                &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-15&#34;&gt;
Gotchas
&lt;/h2&gt;
&lt;p&gt;
Migrating was mostly painless. However when things go wrong you lose access to
your setup, an annoying development cycle. I encountered several Spacemacs
idiosyncrasies to be aware of when using layers to replace my user-config.
&lt;/p&gt;
&lt;p&gt;
Non-obvious errors to avoid:
&lt;/p&gt;
&lt;h3 id=&#34;headline-16&#34;&gt;
Naming
&lt;/h3&gt;
&lt;p&gt;
The naming scheme of &lt;code&gt;setq layer-name-packages&lt;/code&gt; and &lt;code&gt;defun layer-name/init-pkg-name&lt;/code&gt; is strict.
Beware when refactoring that you adjust the layer name accordingly. Failure to
do so will result in the package&amp;#39;s configuration not being loaded or in the case
of ownership, not being installed, rather than a direct error.
&lt;/p&gt;
&lt;h3 id=&#34;headline-17&#34;&gt;
Spacemacs toggles
&lt;/h3&gt;
&lt;p&gt;
Some toggles like &lt;code&gt;spacemacs/toggle-highlight-long-lines-globally-on&lt;/code&gt; do not
belong in any layer and should be defined in your user-config. Six toggles are
now all that compose my &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
This goes for some toggles not explicitly owned by Spacemacs - trying to setup
&lt;code&gt;fringe-mode&lt;/code&gt; failed for me even in a &lt;code&gt;config/post-init-fringe&lt;/code&gt; block.
&lt;/p&gt;
&lt;h3 id=&#34;headline-18&#34;&gt;
OS Configuration
&lt;/h3&gt;
&lt;p&gt;
I define &lt;code&gt;is-linuxp&lt;/code&gt; and a few other OS utilities that conditionally setup
&lt;code&gt;dotspacemacs/init&lt;/code&gt; variables like font size. Layers load after these variables
are set, so the utilities cannot be moved to a layer. Set them at the top of
your &lt;code&gt;init.el&lt;/code&gt;.
&lt;/p&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
Additional Themes
&lt;/h3&gt;
&lt;p&gt;
Spacemacs layers load ordering causes issues for extra themes. Theme packages
cannot be put in a layer. As a result, to use solarized I set:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; ~/.spacemacs.d/init.el&lt;/span&gt;
(defun dotspacemacs/layers ()
  (setq-default dotspacemacs-additional-packages &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(solarized-theme)
                &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;))
(defun dotspacemacs/init ()
  (setq-default dotspacemacs-themes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(solarized-dark solarized-light)
                &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-20&#34;&gt;
Spacemacs Core Layers
&lt;/h3&gt;
&lt;p&gt;
Without doing a deep dive into Spacemacs core, you can expect the following
layers to always be loaded &lt;strong&gt;before all personal layers&lt;/strong&gt;. This is how
&lt;code&gt;dash&lt;/code&gt; is always available and &lt;code&gt;evil-define-key&lt;/code&gt; can be used in keybindings
files.
&lt;/p&gt;
&lt;p&gt;
Call &lt;code&gt;g d&lt;/code&gt; or &lt;code&gt;(spacemacs/jump-to-definition)&lt;/code&gt; in emacs lisp mode to jump to
that layer&amp;#39;s packages.el to check out its packages and configuration.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(configuration-layer/declare-layers
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(spacemacs-base
   spacemacs-completion
   spacemacs-layouts
   spacemacs-editing
   spacemacs-editing-visual
   spacemacs-evil
   spacemacs-language
   spacemacs-misc
   spacemacs-modeline
   spacemacs-navigation
   spacemacs-org
   spacemacs-purpose
   spacemacs-visual))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
These layers follow the same rules and principles as every other layer. If you
have the curiosity, these layers make Spacemacs what it is.
&lt;/p&gt;
&lt;p&gt;
Functionality provided here can be made use of by any layer, assuming those
packages and layers are not explicitly excluded.
&lt;/p&gt;
&lt;h1 id=&#34;headline-21&#34;&gt;
Benefits
&lt;/h1&gt;
&lt;p&gt;
Those that value organization and robustness will find Spacemacs layers to
improve on other configuration management methods.
&lt;/p&gt;
&lt;p&gt;
Following Spacemacs conventions leads to predictable, friendly configurations.
&lt;/p&gt;
&lt;p&gt;
Once you&amp;#39;ve become familiar with its conventions, there is no overhead.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fancy Outline Bullets</title>
      <link>https://ekaschalk.github.io/post/outline-bullets/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/outline-bullets/</guid>
      <description>&lt;p&gt;
We improve upon the outline bullets presented in the previous post &amp;lt;a href=&amp;#39;/post/outline-ivy/&amp;#39;&amp;gt;Managing code with Outlines&amp;lt;/a&amp;gt;.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;My Headings&lt;/th&gt;
&lt;th&gt;Editing my config&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-bullets-fancy.png&#34; alt=&#34;/img/outline-bullets-fancy.png&#34; title=&#34;/img/outline-bullets-fancy.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-bullets-config.png&#34; alt=&#34;/img/outline-bullets-config.png&#34; title=&#34;/img/outline-bullets-config.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
This solution:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Allows for face application to the bullet. The default faces &lt;code&gt;outline-1/2/3...&lt;/code&gt;
only apply to the text, not the bullet.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Adds spaces for higher level bullets. So not every outline-level needs to
have its text start at the same column.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Works for any number of outline levels.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Generalized - uses outline regexes, all that is required to add the bullets
to a mode is adding to its hook.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The package can be found at: &lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines&#34;&gt;https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt;)

(&lt;span style=&#34;color:#a6e22e&#34;&gt;provide&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outlines&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Config&lt;/span&gt;

(defvar pretty-outline-bullets-bullet-list &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An implemention of `org-bullets-bullet-list&amp;#39; for outlines&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;;; Outline-bullets&lt;/span&gt;

(defun pretty-outline--add-font-locks (FONT-LOCK-ALIST)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Put text property for FONT-LOCK-ALIST for var-width replacements.&amp;#34;&lt;/span&gt;
  (font-lock-add-keywords
   &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; (--map (-let (((rgx uni-point) it))
             &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;rgx (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt;
                         (put-text-property
                          (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;display&lt;/span&gt;
                          &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;uni-point)
                         &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))))
           FONT-LOCK-ALIST)))

(defun pretty-outline--bullets-rgx-at-level (LEVEL)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Calculate regex or outline-bullets at LEVEL.&amp;#34;&lt;/span&gt;
  (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^&amp;#34;&lt;/span&gt;
          (-&amp;gt;&amp;gt; LEVEL
             outshine-calc-outline-string-at-level
             s-trim-right
             (s-replace &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\*&amp;#34;&lt;/span&gt;))
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\) &amp;#34;&lt;/span&gt;))

(defun pretty-outline--propertize-bullet (LEVEL BULLET)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add LEVEL-dependent face to BULLET.&amp;#34;&lt;/span&gt;
  (with-face BULLET
             (pcase LEVEL
               (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:inherit&lt;/span&gt; outline-1 &lt;span style=&#34;color:#e6db74&#34;&gt;:underline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
               (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:inherit&lt;/span&gt; outline-2 &lt;span style=&#34;color:#e6db74&#34;&gt;:underline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
               (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:inherit&lt;/span&gt; outline-3 &lt;span style=&#34;color:#e6db74&#34;&gt;:underline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
               (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:inherit&lt;/span&gt; outline-4 &lt;span style=&#34;color:#e6db74&#34;&gt;:underline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
               (_ &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))))

(defun pretty-outline-add-bullets ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Use with `add-hook&amp;#39; to enable pretty-outline-bullets-bullet-list for mode.&amp;#34;&lt;/span&gt;
  (pretty-outline--add-font-locks
   (--map-indexed
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;
     (pretty-outline--bullets-rgx-at-level (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; it-index))
     (concat
      (s-repeat it-index &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
      (pretty-outline--propertize-bullet it-index it)))
    (-take &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; (-cycle pretty-outline-bullets-bullet-list)))))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emacs-lisp-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outline-add-bullets&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hy-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outline-add-bullets&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-outline-add-bullets&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Managing code with Outlines</title>
      <link>https://ekaschalk.github.io/post/outline-ivy/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/outline-ivy/</guid>
      <description>
&lt;p&gt;
I consider outlines an under-utilized yet killer feature of Emacs.
&lt;/p&gt;
&lt;p&gt;
This post is split into two parts:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
Introducing and customizing &lt;code&gt;outline-mode&lt;/code&gt; and &lt;code&gt;outshine-mode&lt;/code&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
[&lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/blob/master/layers/personal/local/outline-ivy/outline-ivy.el&#34;&gt;My package&lt;/a&gt; &lt;code&gt;outline-ivy&lt;/code&gt; for jumping to outlines.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy.gif&#34; alt=&#34;/img/outline-ivy.gif&#34; title=&#34;/img/outline-ivy.gif&#34; /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Intro to Outlines
&lt;/h1&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Background
&lt;/h2&gt;
&lt;p&gt;
Outline-mode is a general framework for headers. Org-mode itself uses
outline-mode.
&lt;/p&gt;
&lt;p&gt;
Headers are demarcated by the current major-mode&amp;#39;s comment syntax, typically
with levels determined by the proceeding number of &lt;code&gt;*&lt;/code&gt;.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
Python: &lt;code&gt;# *&lt;/code&gt; is a level 1 header, &lt;code&gt;# **&lt;/code&gt; a level 2 header…
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Haskell: &lt;code&gt;--*&lt;/code&gt; &lt;code&gt;--**&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Clojure: &lt;code&gt;;; *&lt;/code&gt; &lt;code&gt;;; **&lt;/code&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Emacs lisp uses &lt;code&gt;;;;&lt;/code&gt;, &lt;code&gt;;;;;&lt;/code&gt;, … for compatibility with the many packages that
use the original, not asterisk-based, outline format.
&lt;/p&gt;
&lt;p&gt;
The package &lt;code&gt;outshine&lt;/code&gt; gives utility like narrowing and cycling to these
outlines.
&lt;/p&gt;
&lt;h2 id=&#34;headline-3&#34;&gt;
Setup
&lt;/h2&gt;
&lt;p&gt;
Enable outlines and outshine with:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Require packages for following code&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Required for outshine&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-minor-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine-hook-function&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Enables outline-minor-mode for *ALL* programming buffers&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prog-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-minor-mode&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-4&#34;&gt;
Keybindings
&lt;/h2&gt;
&lt;p&gt;
I remap &lt;code&gt;outline-minor-mode-map&lt;/code&gt; to mirror org-mode. Provided are evil and
leader-key based bindings. Reference org-mode for developing your own
emacs-style bindings.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Narrowing now works within the headline rather than requiring to be on it&lt;/span&gt;
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine-narrow-to-subtree&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:before&lt;/span&gt;
            (lambda (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; args) (unless (outline-on-heading-p &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
                                   (outline-previous-visible-heading &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))

(spacemacs/set-leader-keys
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Narrowing&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nn&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine-narrow-to-subtree&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;widen&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;;; Structural edits&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nj&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-move-subtree-down&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-move-subtree-up&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-promote&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-demote&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((kmap outline-minor-mode-map))
  (define-key kmap (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M-RET&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine-insert-heading&lt;/span&gt;)
  (define-key kmap (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;backtab&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outshine-cycle-buffer&lt;/span&gt;)

  &lt;span style=&#34;color:#75715e&#34;&gt;;; Evil outline navigation keybindings&lt;/span&gt;
  (evil-define-key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(normal visual motion) kmap
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-up-heading&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gj&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-forward-same-level&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-backward-same-level&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-next-visible-heading&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-previous-visible-heading&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;headline-5&#34;&gt;
Styling
&lt;/h2&gt;
&lt;h3 id=&#34;headline-6&#34;&gt;
Faces
&lt;/h3&gt;
&lt;p&gt;
Outline headers fulfill a different goal than org headers. Outlines are for
structuring semantically similar blocks of code. Org headers additionally
incorporate todos, priorities, tags, and so on.
&lt;/p&gt;
&lt;p&gt;
Outlines are necessarily further apart than org headers, which often have no
subtext at all.
&lt;/p&gt;
&lt;p&gt;
So I recommend setting both the &lt;code&gt;:background&lt;/code&gt; and &lt;code&gt;:height&lt;/code&gt; face attributes to
highlight and make obvious the different sections.
&lt;/p&gt;
&lt;p&gt;
This can be done by updating the &lt;code&gt;outline-1/2/3...&lt;/code&gt; faces.
Org mode header faces can set separately using the &lt;code&gt;org-level-1/2/3...&lt;/code&gt; faces.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; my-black &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#1b1b1e&amp;#34;&lt;/span&gt;)

(custom-theme-set-faces
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;solarized-dark&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(outline-1 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.25&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:background&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#268bd2&amp;#34;&lt;/span&gt;
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;my-black &lt;span style=&#34;color:#e6db74&#34;&gt;:weight&lt;/span&gt; bold))))
 &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(outline-2 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.15&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:background&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#2aa198&amp;#34;&lt;/span&gt;
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;my-black &lt;span style=&#34;color:#e6db74&#34;&gt;:weight&lt;/span&gt; bold))))
 &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(outline-3 ((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.05&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:background&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#b58900&amp;#34;&lt;/span&gt;
                          &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;my-black &lt;span style=&#34;color:#e6db74&#34;&gt;:weight&lt;/span&gt; bold)))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
Bullets
&lt;/h3&gt;
&lt;p&gt;
Now these outlines will be displayed with the comment syntax, there is no mirror
of &lt;code&gt;org-bullets-bullet-list&lt;/code&gt; for setting icons to replace the eg. &amp;#39;;;;&amp;#39;.
&lt;/p&gt;
&lt;p&gt;
We need to use &lt;code&gt;compose-region&lt;/code&gt; to manually replace the headers with our custom
bullets. Here is an image of my org-bullets replicated for outlines.
&lt;img src=&#34;https://ekaschalk.github.io/img/outline-bullets.png&#34; alt=&#34;/img/outline-bullets.png&#34; title=&#34;/img/outline-bullets.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
The following code is generalized to replace symbols for possibly many modes and
is a bit complex. Here I implement the outline bullets for lisp-like modes and
python.
&lt;/p&gt;
&lt;p&gt;
UPDATE: Check &amp;lt;a href=&amp;#39;/post/outline-bullets/&amp;#39;&amp;gt;this post for full implementation.&amp;lt;/a&amp;gt;
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defun -add-font-lock-kwds (FONT-LOCK-ALIST)
  (font-lock-add-keywords
   &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; (--map (-let (((rgx uni-point) it))
                &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;rgx (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt;
                            (compose-region (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                                            &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; uni-point)))
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))))
              FONT-LOCK-ALIST)))

(defmacro add-font-locks (FONT-LOCK-HOOKS-ALIST)
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(--each &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;FONT-LOCK-HOOKS-ALIST
     (-let (((font-locks &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; mode-hooks) it))
       (--each mode-hooks
         (add-hook it (-partial &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-add-font-lock-kwds&lt;/span&gt;
                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-value&lt;/span&gt; font-locks)))))))

(defconst emacs-outlines-font-lock-alist
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Outlines&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;;;\\) &amp;#34;&lt;/span&gt;          ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;■&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;;;;\\) &amp;#34;&lt;/span&gt;         ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;○&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;;;;;\\) &amp;#34;&lt;/span&gt;        ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;✸&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;;;;;;\\) &amp;#34;&lt;/span&gt;       ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;✿&lt;/span&gt;)))

(defconst lisp-outlines-font-lock-alist
  &lt;span style=&#34;color:#75715e&#34;&gt;;; Outlines&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;; \\*\\) &amp;#34;&lt;/span&gt;          ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;■&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;; \\*\\*\\) &amp;#34;&lt;/span&gt;       ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;○&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;; \\*\\*\\*\\) &amp;#34;&lt;/span&gt;    ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;✸&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^;; \\*\\*\\*\\*\\) &amp;#34;&lt;/span&gt; ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;✿&lt;/span&gt;)))

(defconst python-outlines-font-lock-alist
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^# \\*\\) &amp;#34;&lt;/span&gt;          ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;■&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^# \\*\\*\\) &amp;#34;&lt;/span&gt;       ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;○&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^# \\*\\*\\*\\) &amp;#34;&lt;/span&gt;    ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;✸&lt;/span&gt;)
    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\(^# \\*\\*\\*\\*\\) &amp;#34;&lt;/span&gt; ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;✿&lt;/span&gt;)))

(add-font-locks
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((emacs-outlines-font-lock-alist emacs-lisp-mode-hook)
   (lisp-outlines-font-lock-alist clojure-mode-hook hy-mode-hook)
   (python-outlines-font-lock-alist python-mode-hook)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This could eventually be improved to work for any number of levels and
auto-determine the outline regex base on the comment syntax.
&lt;/p&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
Ellipsis
&lt;/h3&gt;
&lt;p&gt;
Org-mode has the variable &lt;code&gt;org-ellipsis&lt;/code&gt; for setting the trailing chars for
collapsed headers.
&lt;/p&gt;
&lt;p&gt;
We can set our own outline ellipsis icon as follows:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defvar outline-display-table (make-display-table))
(set-display-table-slot outline-display-table &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;selective-display&lt;/span&gt;
                        (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt; (make-glyph-code ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;▼&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;escape-glyph&lt;/span&gt;)))
(defun set-outline-display-table ()
  (setf buffer-display-table outline-display-table))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set-outline-display-table&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;outline-minor-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set-outline-display-table&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;headline-9&#34;&gt;
Outline-ivy
&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;All the outlines&lt;/th&gt;
&lt;th&gt;Searching catches children&lt;/th&gt;
&lt;th&gt;Restricting Levels&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy-raw.png&#34; alt=&#34;/img/outline-ivy-raw.png&#34; title=&#34;/img/outline-ivy-raw.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy-many.png&#34; alt=&#34;/img/outline-ivy-many.png&#34; title=&#34;/img/outline-ivy-many.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy-level.png&#34; alt=&#34;/img/outline-ivy-level.png&#34; title=&#34;/img/outline-ivy-level.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Current methods for jumping to outlines have significant limitations.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/blob/master/layers/personal/local/outline-ivy/outline-ivy.el&#34;&gt;Outline-ivy&lt;/a&gt; makes outlines a proper navigational, not just organizational, tool
with &lt;code&gt;oi-jump&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
All outlines are collected, stylized, and associated with their parents.
&lt;/p&gt;
&lt;p&gt;
Parents are inserted as invisible text for child outlines. This way, searching
for eg. &amp;#34;Display&amp;#34; catches all its children.
&lt;/p&gt;
&lt;p&gt;
The level is also inserted and hidden enabling the search &amp;#34;1 spacemacs&amp;#34; to catch
only top-level headings matching spacemacs. It also overrides &lt;code&gt;ivy-match-face&lt;/code&gt; and
&lt;code&gt;ivy-height&lt;/code&gt; to play nice with the propertized prompt strings.
&lt;/p&gt;
&lt;p&gt;
The default configuration:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(defvar oi-height &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number of outlines to display, overrides ivy-height.&amp;#34;&lt;/span&gt;)

(defface oi-match-face
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.10&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;light gray&amp;#34;&lt;/span&gt;))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Match face for ivy outline prompt.&amp;#34;&lt;/span&gt;)

(defface oi-face-1
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#268bd2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.25&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:underline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:weight&lt;/span&gt; ultra-bold))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ivy outline face for level 1&amp;#34;&lt;/span&gt;)

(defface oi-face-2
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#2aa198&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:weight&lt;/span&gt; semi-bold))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ivy outline face for level 2&amp;#34;&lt;/span&gt;)

(defface oi-face-3
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;steel blue&amp;#34;&lt;/span&gt;))
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ivy outline face for level 3&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; My keybinding for oi-jump, unbound by default.&lt;/span&gt;
(global-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-j&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oi-jump&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Many emacs lisp packages both intentionally and unintentionally use the outline
syntax for organizing their source. These changes can make understanding and
navigating the source significantly easier.
&lt;/p&gt;
&lt;p&gt;
Below is a screenshot jumping to an outline in &lt;code&gt;org.el&lt;/code&gt;, the core org source
file.
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/outlines-org.png&#34; alt=&#34;/img/outlines-org.png&#34; title=&#34;/img/outlines-org.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
I&amp;#39;m not sure how difficult it would be to port this package to &lt;code&gt;helm&lt;/code&gt;. This is
one of many updates I&amp;#39;ll look to add eventually, such as adding more quick
actions to the prompt like jump-and-narrow or a projective jump version.
&lt;/p&gt;
&lt;h1 id=&#34;headline-10&#34;&gt;
My Experience
&lt;/h1&gt;
&lt;p&gt;
Perhaps the best judge of the impact of some configuration is how often you
find yourself reaching for it. For buffer-wide navigation to a specific area
rather than some specific symbol or function, I now almost exclusively use
&lt;code&gt;oi-jump&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I consider outlines to be one of the most practical features of Emacs. All
source code, in any language, I organize with outlines. Given how unobtrusive
the syntax is, it shouldn&amp;#39;t be difficult to implement in a collaborative
project.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pretty Magit - Integrating commit leaders</title>
      <link>https://ekaschalk.github.io/post/pretty-magit/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/pretty-magit/</guid>
      <description>
&lt;p&gt;
A comparison of how I see my commit logs and how they truly are:
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/magit-symbols.png&#34; alt=&#34;/img/spacemacs/magit-symbols.png&#34; title=&#34;/img/spacemacs/magit-symbols.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/magit-raw.png&#34; alt=&#34;/img/spacemacs/magit-raw.png&#34; title=&#34;/img/spacemacs/magit-raw.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Typically this would be accomplished with Emacs &lt;code&gt;font-lock-mode&lt;/code&gt;. However Magit
is magic, even trivial uses of &lt;code&gt;font-lock-add-keywords&lt;/code&gt; will break fontification
for the entire buffer.
&lt;/p&gt;
&lt;p&gt;
This post addresses adding faces to Magit to achieve in particular icon and
colored commit leaders. I also integrate Ivy/Helm to prompt a leader when
committing so you need not remember or type out completely every leader you
choose.
&lt;/p&gt;
&lt;h1 id=&#34;headline-1&#34;&gt;
Adding leaders
&lt;/h1&gt;
&lt;p&gt;
We cannot use font-locks so we compose the symbols and add the face text
properties ourselves.
&lt;/p&gt;
&lt;p&gt;
Users will interact with the macro &lt;code&gt;pretty-magit&lt;/code&gt; which takes a word such as
Fix, Add, and Docs, a unicode point to replace it with, a face attributes plist,
and optionally whether to exclude it from being added to the commit prompt.
&lt;/p&gt;
&lt;p&gt;
My personal choices for leaders are:
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;
Add&lt;dd&gt;
&lt;p&gt;
Any feature or update - check mark
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Fix&lt;dd&gt;
&lt;p&gt;
Any bug fix - a bug
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Clean&lt;dd&gt;
&lt;p&gt;
Any kind of refactoring - scissors
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Docs&lt;dd&gt;
&lt;p&gt;
Documentation changes - info symbol
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Feature&lt;dd&gt;
&lt;p&gt;
A milestone commit - flagpost
&lt;/p&gt;
&lt;dd&gt;
&lt;/dl&gt;
&lt;p&gt;
I also fontify origin and master with the github icon and branch icon
respectively, and exclude these from the commit prompts.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)

(defmacro pretty-magit (WORD ICON PROPS &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; NO-PROMPT?)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replace sanitized WORD with ICON, PROPS and by default add to prompts.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(prog1
     (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-magit-alist&lt;/span&gt;
                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (rx bow (group &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;WORD (&lt;span style=&#34;color:#a6e22e&#34;&gt;eval&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;NO-PROMPT? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))))
                        &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;ICON &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,PROPS&lt;/span&gt;))
     (unless &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;NO-PROMPT?
       (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pretty-magit-prompt&lt;/span&gt; (concat &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;WORD &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt;)))))

(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; pretty-magit-alist &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; pretty-magit-prompt &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Feature&amp;#34;&lt;/span&gt; ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;slate gray&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;))
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add&amp;#34;&lt;/span&gt;     ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#375E97&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;))
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fix&amp;#34;&lt;/span&gt;     ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FB6542&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;))
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clean&amp;#34;&lt;/span&gt;   ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFBB00&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;))
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Docs&amp;#34;&lt;/span&gt;    ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#3F681C&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;))
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;  ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:box&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(pretty-magit &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;  ?&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;:box&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)

(defun add-magit-faces ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add face properties and compose symbols for buffer from pretty-magit.&amp;#34;&lt;/span&gt;
  (interactive)
  (with-silent-modifications
    (--each pretty-magit-alist
      (-let (((rgx icon props) it))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp rgx &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
            (compose-region
             (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) icon)
            (when props
              (add-face-text-property
               (match-beginning &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (match-end &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) props))))))))

(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;magit-status&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-magit-faces&lt;/span&gt;)
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;magit-refresh-buffer&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-magit-faces&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I&amp;#39;ve tried about all the magit hooks and the only way to apply these updates are
with &lt;code&gt;advice-add&lt;/code&gt;.
&lt;/p&gt;
&lt;h1 id=&#34;headline-2&#34;&gt;
Adding Ivy or Helm
&lt;/h1&gt;
&lt;p&gt;
Since this is Emacs, we can do better than typing out the leaders we&amp;#39;ve chosen
each time we are committing. Here I present a solution with Ivy but Helm would
be little different.
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;git-commit-setup-hook&lt;/code&gt; they provide has a delayed execution.
Magit&amp;#39;s ammend, reword, and other commit bindings internally use that same hook.
However, it does not make sense to prompt a leader in those cases.
We can only distinguish a plain new commit by the call of &lt;code&gt;magit-commit&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
With these observations, we must advise &lt;code&gt;magit-commit&lt;/code&gt; to let the hook know
whether to call the prompt.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; use-magit-commit-prompt-p &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(defun use-magit-commit-prompt (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; args)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; use-magit-commit-prompt-p &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(defun magit-commit-prompt ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Magit prompt and insert commit header with faces.&amp;#34;&lt;/span&gt;
  (interactive)
  (when use-magit-commit-prompt-p
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; use-magit-commit-prompt-p &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
    (insert (ivy-read &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Commit Type &amp;#34;&lt;/span&gt; pretty-magit-prompt
                      &lt;span style=&#34;color:#e6db74&#34;&gt;:require-match&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:sort&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:preselect&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add: &amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#75715e&#34;&gt;;; Or if you are using Helm...&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; (insert (helm :sources (helm-build-sync-source &amp;#34;Commit Type &amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;                          :candidates pretty-magit-prompt)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;;               :buffer &amp;#34;*magit cmt prompt*&amp;#34;))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;;; I haven&amp;#39;t tested this but should be simple to get the same behaior&lt;/span&gt;
    (add-magit-faces)
    (evil-insert &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;; If you use evil&lt;/span&gt;
    ))

(remove-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-commit-setup-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;with-editor-usage-message&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-commit-setup-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;magit-commit-prompt&lt;/span&gt;)
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;magit-commit&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-magit-commit-prompt&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/magit-prompt.png&#34; alt=&#34;/img/magit-prompt.png&#34; title=&#34;/img/magit-prompt.png&#34; /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;headline-3&#34;&gt;
Further
&lt;/h1&gt;
&lt;p&gt;
Beware of two very minor issues that I have not been able to resolve:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
If you escape an ivy leader prompt, then next commit will skip the prompt and
will work fine thereon. Avoid by just not escaping the prompt.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
In the commit messages, the insertion from the ivy prompt will be the right
symbol, but lose its face properties when text is inserted. This is due to
deep Magit propertize magic.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
There are many possible leaders, consider these options&lt;sup class=&#34;footnote-reference&#34;&gt;&lt;a id=&#34;footnote-reference-1&#34; href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:
&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;
Add&lt;dd&gt;
&lt;p&gt;
Create a capability e.g. feature, test, dependency.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Cut&lt;dd&gt;
&lt;p&gt;
Remove a capability e.g. feature, test, dependency.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Fix&lt;dd&gt;
&lt;p&gt;
Fix an issue e.g. bug, typo, accident, misstatement.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Bump&lt;dd&gt;
&lt;p&gt;
Increase the version of something e.g. dependency.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Make&lt;dd&gt;
&lt;p&gt;
Change the build process, or tooling, or infra.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Start&lt;dd&gt;
&lt;p&gt;
Begin doing something; e.g. create a feature flag.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Stop&lt;dd&gt;
&lt;p&gt;
End doing something; e.g. remove a feature flag.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Refactor&lt;dd&gt;
&lt;p&gt;
A code change that MUST be just a refactoring.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Reformat&lt;dd&gt;
&lt;p&gt;
Refactor of formatting, e.g. omit whitespace.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Optimize&lt;dd&gt;
&lt;p&gt;
Refactor of performance, e.g. speed up code.
&lt;/p&gt;
&lt;dd&gt;
&lt;dt&gt;
Document&lt;dd&gt;
&lt;p&gt;
Refactor of documentation, e.g. help files.
&lt;/p&gt;
&lt;dd&gt;
&lt;/dl&gt;
&lt;h1 id=&#34;headline-4&#34;&gt;
Footnotes
&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr class=&#34;footnotes-separatator&#34;&gt;
&lt;div class=&#34;footnote-definitions&#34;&gt;
&lt;div class=&#34;footnote-definition&#34;&gt;
&lt;sup id=&#34;footnote-1&#34;&gt;&lt;a href=&#34;#footnote-reference-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;div class=&#34;footnote-body&#34;&gt;
&lt;p&gt;
Commit leader examples taken from from &lt;a href=&#34;https://news.ycombinator.com/item?id=13889155.&#34;&gt;https://news.ycombinator.com/item?id=13889155.&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making eshell your own</title>
      <link>https://ekaschalk.github.io/post/custom-eshell/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/custom-eshell/</guid>
      <description>&lt;p&gt;
I have written utilities for choosing what information, icons, and faces your
eshell prompt presents.
&lt;/p&gt;
&lt;p&gt;
Example eshell prompts:
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/esh-ex.png&#34; alt=&#34;/img/esh-ex.png&#34; title=&#34;/img/esh-ex.png&#34; /&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/esh-me.png&#34; alt=&#34;/img/esh-me.png&#34; title=&#34;/img/esh-me.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;
Eshell prompt customization takes place in &lt;code&gt;eshell-prompt-function&lt;/code&gt; and
&lt;code&gt;eshell-prompt-regexp&lt;/code&gt;. The former determines the content of your prompt
while the latter distinguishes your commands.
&lt;/p&gt;
&lt;p&gt;
I define a macro &lt;code&gt;esh-section&lt;/code&gt; taking a name, an icon, a form or variable to be
evaluated, and optionally face properties. They create anonymous functions which
will be evaluated and concatenated at prompt-time.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt;)

(defmacro with-face (STR &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; PROPS)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return STR propertized with PROPS.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(propertize &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;STR &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;face&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;PROPS)))

(defmacro esh-section (NAME ICON FORM &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; PROPS)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Build eshell section NAME with ICON prepended to evaled FORM with PROPS.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;NAME
         (lambda () (when &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;FORM
                      (-&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;ICON
                          (concat esh-section-delim &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;FORM)
                          (with-face &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;PROPS))))))

(defun esh-acc (acc x)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accumulator for evaluating and concatenating esh-sections.&amp;#34;&lt;/span&gt;
  (--if-let (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; x)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Build `eshell-prompt-function&amp;#39;&amp;#34;&lt;/span&gt;
  (concat esh-header
          (-reduce-from &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;esh-acc&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; eshell-funcs)
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;
          eshell-prompt-string))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now lets define the needed configuration.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; Separator between esh-sections&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-sep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;; or &amp;#34; | &amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; Separator between an esh-section icon and form&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-section-delim &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Eshell prompt header&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n &amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;; or &amp;#34;\n┌─&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; your login, these can be the same.&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; eshell-prompt-regexp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;; or &amp;#34;└─&amp;gt; &amp;#34;&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; eshell-prompt-string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;; or &amp;#34;└─&amp;gt; &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we are set to build some sections. A note, if a section&amp;#39;s form returns nil,
then it will be skipped, so the effect of eg. python virtual environments will
only appear when you have an active venv.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(esh-section esh-dir
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xf07c&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;  (faicon folder)&lt;/span&gt;
             (abbreviate-file-name (eshell/pwd))
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gold&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bold&lt;/span&gt; ultra-bold &lt;span style=&#34;color:#e6db74&#34;&gt;:underline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(esh-section esh-git
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xe907&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;  (git icon)&lt;/span&gt;
             (magit-get-current-branch)
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pink&amp;#34;&lt;/span&gt;))

(esh-section esh-python
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xe928&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;  (python icon)&lt;/span&gt;
             pyvenv-virtual-env-name)

(esh-section esh-clock
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xf017&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;  (clock icon)&lt;/span&gt;
             (format-time-string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%H:%M&amp;#34;&lt;/span&gt; (current-time))
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;forest green&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Below I implement a &amp;#34;prompt number&amp;#34; section&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-prompt-num &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-exit-hook&lt;/span&gt; (lambda () (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-prompt-num &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
(advice-add &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-send-input&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:before&lt;/span&gt;
            (lambda (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; args) (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xf0c9&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;;  (list icon)&lt;/span&gt;
             (number-to-string esh-prompt-num)
             &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:foreground&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;brown&amp;#34;&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Choose which eshell-funcs to enable&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; eshell-funcs (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; esh-dir esh-git esh-python esh-clock esh-num))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Enable the new eshell prompt&lt;/span&gt;
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; eshell-prompt-function &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;esh-prompt-func&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Further extensions to explore are predicate-based face application for eg.
distinguishing master and other branches and modeline-like foreground separation.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5&#34;&gt;I&amp;#39;ve hosted the code altogether at this gist&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/ekaschalk/dotspacemacs/blob/master/.spacemacs&#34;&gt;display/shell in my config&lt;/a&gt; will host the most recent iteration and all my other
emacs tweaks.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anonymous function macro in elisp</title>
      <link>https://ekaschalk.github.io/post/xi-macro/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/xi-macro/</guid>
      <description>&lt;p&gt;
Clojure has anonymous functions with the reader macro &lt;code&gt;#(&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&#34;src src-clojure&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(print %2 %1) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;+END_SRCa

Emacs Lisp doesn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&lt;/span&gt; have reader macros, but we can take direction from Hylang, a
lisp dialect similar to Clojure inter-oping with Python.

It implements the anonymous functions as the aptly named &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;xi&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; macro, where the
lambda has arguments determined by presence of &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x1 ... xi&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt; .

&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;+BEGIN_SRC lisp
((&lt;span style=&#34;color:#a6e22e&#34;&gt;xi&lt;/span&gt; print x2 x1) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We can implement the &lt;code&gt;xi&lt;/code&gt; macro in Emacs Lisp roughly as:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt;)

(defmacro xi (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; FORMS)
  &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(lambda &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(--filter (s-contains? (&lt;span style=&#34;color:#a6e22e&#34;&gt;symbol-name&lt;/span&gt; it)
                                   (&lt;span style=&#34;color:#a6e22e&#34;&gt;prin1-to-string&lt;/span&gt; FORMS))
                      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(x1 x2 x3 x4 x5))
     &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;FORMS))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This enables:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; (xi &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; (concat x2 x1)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;;; expands to&lt;/span&gt;
(&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; (lambda (x1 x2) (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; (concat x2 x1))) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This implementation could be improved - the above example works with &lt;code&gt;(xi x3 x1)&lt;/code&gt;,
it doesn&amp;#39;t actually validate that the xi are contiguous. It also doesn&amp;#39;t cover
all numbers of arguments, though over 5 arguments would be questionable anyway.
Lastly it does not distinguish xis as part of say strings.
&lt;/p&gt;
&lt;p&gt;
This macro is especially useful for lambdas without arguments, like adding hooks
and keybindings.
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-exit-hook&lt;/span&gt; (lambda () (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-prompt-num &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
&lt;span style=&#34;color:#75715e&#34;&gt;;; Becomes&lt;/span&gt;
(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eshell-exit-hook&lt;/span&gt; (xi &lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; esh-prompt-num &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Emacs Blogging Workflow</title>
      <link>https://ekaschalk.github.io/post/org-mode-blogging/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/org-mode-blogging/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is a static site generator. It natively supports org-mode, builds fast, and
has live reloading.
&lt;/p&gt;
&lt;p&gt;
I have two repos for &lt;a href=&#34;https://github.com/ekaschalk/blog&#34;&gt;blog content and settings&lt;/a&gt; and &lt;a href=&#34;https://github.com/ekaschalk/ekaschalk.github.io&#34;&gt;hugo output&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I have defined some emacs lisp utilities to make interacting with Hugo easier.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;deploy-blog&lt;/code&gt; will goto your blog content, run &lt;code&gt;hugo&lt;/code&gt;, cleanup old html, and
push the updates.
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;start-blog-server&lt;/code&gt; will run &lt;code&gt;hugo server&lt;/code&gt; if not already running, and open the
webpage in your browser.
&lt;/p&gt;
&lt;p&gt;
My blog workflow is then to startup the server (SPC a a), write some content in
org-mode and see it reflected in the browser on each save, and deploy (SPC a b).
&lt;/p&gt;
&lt;p&gt;
All the code:
&lt;/p&gt;
&lt;div class=&#34;src src-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cl&lt;/span&gt;)
(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dash&lt;/span&gt;)

(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; blog-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/dev/blog&amp;#34;&lt;/span&gt;
      public-blog-dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/dev/public-blog&amp;#34;&lt;/span&gt;
      hugo-process &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hugo Server&amp;#34;&lt;/span&gt;
      hugo-server-site &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:1313/&amp;#34;&lt;/span&gt;)

(defmacro with-dir (DIR &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; FORMS)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Execute FORMS in DIR.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((orig-dir (&lt;span style=&#34;color:#a6e22e&#34;&gt;gensym&lt;/span&gt;)))
    &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;progn&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;orig-dir default-directory)
            (cd &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;DIR) &lt;span style=&#34;color:#f92672&#34;&gt;,@&lt;/span&gt;FORMS (cd &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;orig-dir))))

(defun deploy-blog ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run hugo and push changes upstream.&amp;#34;&lt;/span&gt;
  (interactive)
  (with-dir public-blog-dir
            (shell-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git rm -rf .&amp;#34;&lt;/span&gt;)
            (shell-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git clean -fxd&amp;#34;&lt;/span&gt;)

            (with-dir blog-dir (-&amp;gt;&amp;gt; public-blog-dir
                                    (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hugo -d &amp;#34;&lt;/span&gt;)
                                    shell-command))

            (shell-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add .&amp;#34;&lt;/span&gt;)
            (--&amp;gt; (current-time-string)
                 (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git commit -m \&amp;#34;&amp;#34;&lt;/span&gt; it &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;)
                 (shell-command it))
            (magit-push-current-to-upstream &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))

(defun start-blog-server ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run hugo server if not already running and open its webpage.&amp;#34;&lt;/span&gt;
  (interactive)
  (with-dir blog-dir
            (unless (get-process hugo-process)
              (start-process hugo-process &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hugo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;))
            (browse-url hugo-server-site)))

(defun end-blog-server ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;End hugo server process if running.&amp;#34;&lt;/span&gt;
  (interactive)
  (--when-let (get-process hugo-process)
    (delete-process it)))

(spacemacs/set-leader-keys (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ab&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deploy-blog&lt;/span&gt;)
(spacemacs/set-leader-keys (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start-blog-server&lt;/span&gt;)
(spacemacs/set-leader-keys (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ae&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end-blog-server&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For reference, this blog post is an ordinary org file with just the headers:
&lt;/p&gt;
&lt;div class=&#34;src src-org&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#+TITLE&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: An Emacs Blogging Workflow&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+SLUG&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: org-mode-blogging&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+DATE&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: 2017-06-20&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+CATEGORIES&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: emacs org-mode&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+SUMMARY&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: Easy org-mode blogging with Hugo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#+DRAFT&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;: false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
And hugo takes care of the rest.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
